<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\LPC1788_EA_LPC1788_KEIL_CMSIS\Debug_FLASH\Obj\MDO_EMWIN522.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\LPC1788_EA_LPC1788_KEIL_CMSIS\Debug_FLASH\Obj\MDO_EMWIN522.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jan 16 00:31:59 2019
<BR><P>
<H3>Maximum Stack Usage =       1548 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vGUITask &rArr; AZP_Menu &rArr; SB_init &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NMI_Handler</a><BR>
 <LI><a href="#[12]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">HardFault_Handler</a><BR>
 <LI><a href="#[13]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">MemManage_Handler</a><BR>
 <LI><a href="#[14]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">BusFault_Handler</a><BR>
 <LI><a href="#[15]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">DebugMon_Handler</a><BR>
 <LI><a href="#[31]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">BOD_IRQHandler</a><BR>
 <LI><a href="#[2bf]">_ReorderLevel</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2bf]">_ReorderLevel</a><BR>
 <LI><a href="#[2b7]">_BiDiResolveExplicit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b7]">_BiDiResolveExplicit</a><BR>
 <LI><a href="#[258]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[258]">_Findx1</a><BR>
 <LI><a href="#[257]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[257]">_Findx0</a><BR>
 <LI><a href="#[256]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[256]">_Findy1</a><BR>
 <LI><a href="#[267]">WM_SendToParent</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[248]">WM__SendMessage</a><BR>
 <LI><a href="#[24e]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24e]">WM__InvalidateDrawAndDescs</a><BR>
 <LI><a href="#[237]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[237]">WM__InvalidateRect</a><BR>
 <LI><a href="#[232]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[232]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[365]">WM__UpdateChildPositions</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[273]">WM_ResizeWindow</a><BR>
 <LI><a href="#[3aa]">_MoveDescendents</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3aa]">_MoveDescendents</a><BR>
 <LI><a href="#[131]">_Alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[130]">_EnlargeBlocks</a><BR>
 <LI><a href="#[3d1]">App_ReloadSettings</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d1]">App_ReloadSettings</a><BR>
 <LI><a href="#[3e7]">SB_setget_component</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d1]">App_ReloadSettings</a><BR>
 <LI><a href="#[406]">AppSettings_StoreDefaults</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d1]">App_ReloadSettings</a><BR>
 <LI><a href="#[2ed]">png_free_data</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ed]">png_free_data</a><BR>
 <LI><a href="#[24d]">_DeleteAllChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24a]">WM_DeleteWindow</a><BR>
 <LI><a href="#[25d]">_PaintTransChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25d]">_PaintTransChildren</a><BR>
 <LI><a href="#[6c]">_png_cexcept_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">_png_cexcept_error</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC_IRQHandler</a> from bsp.o(i.ADC_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[99]">AZPDisc_on_comm_timeout</a> from azpdisc.o(i.AZPDisc_on_comm_timeout) referenced from azpdisc.o(i._cbMidDraw)
 <LI><a href="#[9a]">AZPFast_on_comm_timeout</a> from azpfast.o(i.AZPFast_on_comm_timeout) referenced from azpfast.o(i._cbMidDraw)
 <LI><a href="#[82]">AZPMenu_on_comm_timeout</a> from azpmenu.o(i.AZPMenu_on_comm_timeout) referenced from azpmenu.o(i.AZPMenu_on_msg_ready)
 <LI><a href="#[82]">AZPMenu_on_comm_timeout</a> from azpmenu.o(i.AZPMenu_on_comm_timeout) referenced 2 times from azpmenu.o(i._cbMidDraw)
 <LI><a href="#[98]">AllMetal_on_comm_timeout</a> from azpallmetal.o(i.AllMetal_on_comm_timeout) referenced from azpallmetal.o(i._cbMidDraw)
 <LI><a href="#[31]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3c]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[33]">CAN_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[34]">DMA_IRQHandler</a> from appcommon.o(i.DMA_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[42]">EEPROM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2d]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[36]">ENET_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[40]">GPIO_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[f6]">GUIMONO_DispChar</a> from GUI_CharM.o(.text) referenced from F6x8.o(.constdata)
 <LI><a href="#[f7]">GUIMONO_GetCharDistX</a> from GUI_CharM.o(.text) referenced from F6x8.o(.constdata)
 <LI><a href="#[f8]">GUIMONO_GetFontInfo</a> from GUI_CharM.o(.text) referenced from F6x8.o(.constdata)
 <LI><a href="#[f9]">GUIMONO_IsInFont</a> from GUI_CharM.o(.text) referenced from F6x8.o(.constdata)
 <LI><a href="#[d1]">GUIPROP_DispChar</a> from GUI_CharP.o(.text) referenced 7 times from F16B_ASCII.o(.constdata)
 <LI><a href="#[d2]">GUIPROP_GetCharDistX</a> from GUI_CharP.o(.text) referenced 7 times from F16B_ASCII.o(.constdata)
 <LI><a href="#[d3]">GUIPROP_GetFontInfo</a> from GUI_CharP.o(.text) referenced 7 times from F16B_ASCII.o(.constdata)
 <LI><a href="#[d4]">GUIPROP_IsInFont</a> from GUI_CharP.o(.text) referenced 7 times from F16B_ASCII.o(.constdata)
 <LI><a href="#[14b]">GUI_BMP__GetData</a> from GUI_BMP.o(.text) referenced from GUI_BMP.o(.text)
 <LI><a href="#[6e]">GUI_MEMDEV_Paint1Static</a> from GUIDEV_StaticDevices.o(.text) referenced 2 times from WM.o(.text)
 <LI><a href="#[67]">GUI_MEMDEV__WriteToActiveAlpha</a> from GUIDEV_WriteToActiveAlpha.o(.text) referenced from GUIDEV_32.o(.text)
 <LI><a href="#[68]">GUI_MEMDEV__WriteToActiveOpaque</a> from GUIDEV_WriteToActiveOpaque.o(.text) referenced 2 times from GUIDEV_8.o(.text)
 <LI><a href="#[ed]">GUI_MULTIBUF_Begin</a> from GUI_MULTIBUF.o(.text) referenced from WM_MULTIBUF.o(.constdata)
 <LI><a href="#[ee]">GUI_MULTIBUF_End</a> from GUI_MULTIBUF.o(.text) referenced from WM_MULTIBUF.o(.constdata)
 <LI><a href="#[69]">GUI_PNG__GetData</a> from GUI_PNG.o(.text) referenced 2 times from GUI_PNG.o(.text)
 <LI><a href="#[be]">GUI_SIF__GetCharDistX</a> from GUI_SIF.o(.text) referenced from GUI_SIF_Prop.o(.constdata)
 <LI><a href="#[bf]">GUI_SIF__GetFontInfo</a> from GUI_SIF.o(.text) referenced from GUI_SIF_Prop.o(.constdata)
 <LI><a href="#[c0]">GUI_SIF__IsInFont</a> from GUI_SIF.o(.text) referenced from GUI_SIF_Prop.o(.constdata)
 <LI><a href="#[36e]">GUI_SetAlpha</a> from GUI_SetAlpha.o(.text) referenced from GUI_SetAlpha.o(.text)
 <LI><a href="#[2a9]">GUI_TIMER_Exec</a> from GUI_Timer.o(.text) referenced from GUI_Timer.o(.text)
 <LI><a href="#[107]">GUI_USAGE_BM_AddHLine</a> from GUIDEV_UsageBM.o(.text) referenced from GUIDEV_UsageBM.o(.constdata)
 <LI><a href="#[106]">GUI_USAGE_BM_AddPixel</a> from GUIDEV_UsageBM.o(.text) referenced from GUIDEV_UsageBM.o(.constdata)
 <LI><a href="#[108]">GUI_USAGE_BM_Clear</a> from GUIDEV_UsageBM.o(.text) referenced from GUIDEV_UsageBM.o(.constdata)
 <LI><a href="#[10a]">GUI_USAGE_BM_GetNextDirty</a> from GUIDEV_UsageBM.o(.text) referenced from GUIDEV_UsageBM.o(.constdata)
 <LI><a href="#[b]">GUI_X_ExecIdle</a> from gui_x.o(i.GUI_X_ExecIdle) referenced 2 times from GUI_WaitEvent.o(.data)
 <LI><a href="#[51]">GUI__BIDI_GetCharDir</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[55]">GUI__BIDI_GetCharWrap</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[53]">GUI__BIDI_GetCursorCharacter</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[4f]">GUI__BIDI_GetCursorPosChar</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[4e]">GUI__BIDI_GetCursorPosX</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[50]">GUI__BIDI_GetLogChar</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[54]">GUI__BIDI_GetWordWrap</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[52]">GUI__BIDI_IsNSM</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[4d]">GUI__BIDI_Log2Vis</a> from GUI__BiDi.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[1b4]">GUI__BIDI_Log2VisBuffered</a> from GUI_UC_EnableBIDI.o(.text) referenced from GUI_UC_EnableBIDI.o(.text)
 <LI><a href="#[c]">GUI__MixColors</a> from GUI__Alpha.o(.text) referenced 2 times from GUI__Alpha.o(.data)
 <LI><a href="#[d]">GUI__MixColorsBulk</a> from GUI__Alpha.o(.text) referenced 2 times from GUI__Alpha.o(.data)
 <LI><a href="#[8d]">Handshake_comm_fail</a> from azploading.o(i.Handshake_comm_fail) referenced from azploading.o(i.AZP_Loading)
 <LI><a href="#[8d]">Handshake_comm_fail</a> from azploading.o(i.Handshake_comm_fail) referenced from azploading.o(i.HandShake_on_msg_ready)
 <LI><a href="#[12]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[24]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">I2C1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[26]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[35]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4b]">LCD_DrawHLine</a> from LCD.o(.text) referenced from GUI_Core.o(.constdata)
 <LI><a href="#[4b]">LCD_DrawHLine</a> from LCD.o(.text) referenced from GUI_DrawGradientRounded.o(.text)
 <LI><a href="#[bc]">LCD_DrawPixel</a> from LCD.o(.text) referenced from GUI_Core.o(.constdata)
 <LI><a href="#[4c]">LCD_DrawVLine</a> from LCD.o(.text) referenced from GUI_DrawGradientRounded.o(.text)
 <LI><a href="#[a]">LCD_GetpPalConvTableBM</a> from LCD_Color.o(.text) referenced 2 times from GUI_Core.o(.data)
 <LI><a href="#[3f]">LCD_IRQHandler</a> from lcdconf_multiplebuffer.o(i.LCD_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[77]">LCD_Index2Color_888</a> from GUICC_888_Index2Color.o(.text) referenced from GUI__Alpha.o(.text)
 <LI><a href="#[76]">LCD_Index2Color_8888</a> from GUICC_8888_Index2Color.o(.text) referenced from GUICC_8888.o(.constdata)
 <LI><a href="#[76]">LCD_Index2Color_8888</a> from GUICC_8888_Index2Color.o(.text) referenced 2 times from GUI__Alpha.o(.text)
 <LI><a href="#[48]">LCD_Index2Color_M555</a> from GUICC_M555_Index2Color.o(.text) referenced from GUI_BMP.o(.text)
 <LI><a href="#[b1]">LCD_Index2Color_M565</a> from GUICC_M565_Index2Color.o(.text) referenced from GUICC_M565.o(.constdata)
 <LI><a href="#[37]">MCI_IRQHandler</a> from lpc177x_8x_mci.o(i.MCI_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[38]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[11]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2a]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3a]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[41]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[23]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[18]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[39]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2b]">RTC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[29]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3e]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_lpc177x_8x.o(i.SystemInit) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[1b]">TIMER0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1c]">TIMER1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">TIMER2_IRQHandler</a> from dac.o(i.TIMER2_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1e]">TIMER3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">UART0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[20]">UART1_IRQHandler</a> from uartint.o(i.UART1_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">UART2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">UART3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a7]">UARTGetChar</a> from debug_frmwrk.o(i.UARTGetChar) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a9]">UARTGetCharInNonBlock</a> from debug_frmwrk.o(i.UARTGetCharInNonBlock) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a8]">UARTGetValue</a> from debug_frmwrk.o(i.UARTGetValue) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[9d]">UARTPutChar</a> from debug_frmwrk.o(i.UARTPutChar) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a4]">UARTPutDec</a> from debug_frmwrk.o(i.UARTPutDec) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a5]">UARTPutDec16</a> from debug_frmwrk.o(i.UARTPutDec16) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a6]">UARTPutDec32</a> from debug_frmwrk.o(i.UARTPutDec32) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[9e]">UARTPutHex</a> from debug_frmwrk.o(i.UARTPutHex) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[9f]">UARTPutHex16</a> from debug_frmwrk.o(i.UARTPutHex16) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a2]">UARTPutHex16_</a> from debug_frmwrk.o(i.UARTPutHex16_) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a0]">UARTPutHex32</a> from debug_frmwrk.o(i.UARTPutHex32) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a3]">UARTPutHex32_</a> from debug_frmwrk.o(i.UARTPutHex32_) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[a1]">UARTPutHex_</a> from debug_frmwrk.o(i.UARTPutHex_) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[9b]">UARTPuts</a> from debug_frmwrk.o(i.UARTPuts) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[9c]">UARTPuts_</a> from debug_frmwrk.o(i.UARTPuts_) referenced from debug_frmwrk.o(i.debug_frmwrk_init)
 <LI><a href="#[3b]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">USB_IRQHandler</a> from lpc177x_8x_usbhost.o(i.USB_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[15]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25b]">WM__Paint1</a> from WM.o(.text) referenced 3 times from WM.o(.text)
 <LI><a href="#[c3]">_CalcSizeOfChar</a> from GUI_UC_EncodeUTF8.o(.text) referenced 2 times from GUI_UC_EncodeUTF8.o(.constdata)
 <LI><a href="#[10e]">_Color2Index</a> from GUI_SetAlpha.o(.text) referenced from GUI_SetAlpha.o(.constdata)
 <LI><a href="#[b3]">_Color2IndexBulk</a> from GUICC_M565.o(.text) referenced 3 times from GUICC_M565.o(.constdata)
 <LI><a href="#[10b]">_Color2Index_0</a> from GUICC_0.o(.text) referenced from GUICC_0.o(.constdata)
 <LI><a href="#[b5]">_Color2Index_8</a> from GUICC_8.o(.text) referenced from GUICC_8.o(.constdata)
 <LI><a href="#[b8]">_Color2Index_8888</a> from GUICC_8888.o(.text) referenced from GUICC_8888.o(.constdata)
 <LI><a href="#[b0]">_Color2Index_M565</a> from GUICC_M565.o(.text) referenced from GUICC_M565.o(.constdata)
 <LI><a href="#[63]">_CopyBuffer</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[bd]">_DispChar</a> from GUI_SIF_Prop.o(.text) referenced from GUI_SIF_Prop.o(.constdata)
 <LI><a href="#[c5]">_DrawBitmap</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[c6]">_DrawHLine</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[1]">_DrawLine_RGB</a> from GUI_BMP.o(.text) referenced 2 times from GUI_BMP.o(.data)
 <LI><a href="#[1]">_DrawLine_RGB</a> from GUI_BMP.o(.text) referenced from GUI_BMP.o(.text)
 <LI><a href="#[c7]">_DrawVLine</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[c4]">_Encode</a> from GUI_UC_EncodeUTF8.o(.text) referenced 2 times from GUI_UC_EncodeUTF8.o(.constdata)
 <LI><a href="#[c8]">_FillRect</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[109]">_GUI_USAGE_BM_Delete</a> from GUIDEV_UsageBM.o(.text) referenced from GUIDEV_UsageBM.o(.constdata)
 <LI><a href="#[c1]">_GetCharCode</a> from GUI_UC_EncodeUTF8.o(.text) referenced 2 times from GUI_UC_EncodeUTF8.o(.constdata)
 <LI><a href="#[c2]">_GetCharSize</a> from GUI_UC_EncodeUTF8.o(.text) referenced 2 times from GUI_UC_EncodeUTF8.o(.constdata)
 <LI><a href="#[f]">_GetCharWrap</a> from GUI__Wrap.o(.text) referenced 2 times from GUI__Wrap.o(.data)
 <LI><a href="#[9]">_GetCursorCharacter</a> from GUI__GetCursorPos.o(.text) referenced 2 times from GUI__GetCursorPos.o(.data)
 <LI><a href="#[8]">_GetCursorPosChar</a> from GUI__GetCursorPos.o(.text) referenced 2 times from GUI__GetCursorPos.o(.data)
 <LI><a href="#[7]">_GetCursorPosX</a> from GUI__GetCursorPos.o(.text) referenced 2 times from GUI__GetCursorPos.o(.data)
 <LI><a href="#[cf]">_GetDevData</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[cd]">_GetDevFunc</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[ce]">_GetDevProp</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[110]">_GetIndexMask</a> from GUI_SetAlpha.o(.text) referenced from GUI_SetAlpha.o(.constdata)
 <LI><a href="#[10d]">_GetIndexMask_0</a> from GUICC_0.o(.text) referenced from GUICC_0.o(.constdata)
 <LI><a href="#[b7]">_GetIndexMask_8</a> from GUICC_8.o(.text) referenced from GUICC_8.o(.constdata)
 <LI><a href="#[b9]">_GetIndexMask_8888</a> from GUICC_8888.o(.text) referenced from GUICC_8888.o(.constdata)
 <LI><a href="#[b2]">_GetIndexMask_M565</a> from GUICC_M565.o(.text) referenced from GUICC_M565.o(.constdata)
 <LI><a href="#[c9]">_GetPixelIndex</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[5a]">_GetPos</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[d0]">_GetRect</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[e]">_GetWordWrap</a> from GUI__Wrap.o(.text) referenced 2 times from GUI__Wrap.o(.data)
 <LI><a href="#[10f]">_Index2Color</a> from GUI_SetAlpha.o(.text) referenced from GUI_SetAlpha.o(.constdata)
 <LI><a href="#[49]">_Index2ColorBitfields</a> from GUI_BMP.o(.text) referenced from GUI_BMP.o(.text)
 <LI><a href="#[b4]">_Index2ColorBulk</a> from GUICC_M565.o(.text) referenced 3 times from GUICC_M565.o(.constdata)
 <LI><a href="#[10c]">_Index2Color_0</a> from GUICC_0.o(.text) referenced from GUICC_0.o(.constdata)
 <LI><a href="#[b6]">_Index2Color_8</a> from GUICC_8.o(.text) referenced from GUICC_8.o(.constdata)
 <LI><a href="#[5d]">_Init</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[92]">_LCD_CopyBuffer</a> from lcdconf_multiplebuffer.o(i._LCD_CopyBuffer) referenced from lcdconf_multiplebuffer.o(i.LCD_X_Config)
 <LI><a href="#[6]">_Log2VisBuffered</a> from GUI_CharLine.o(.text) referenced 2 times from GUI_CharLine.o(.data)
 <LI><a href="#[5]">_NextPixel_End</a> from GUI_BMP.o(.text) referenced 2 times from GUI_BMP.o(.data)
 <LI><a href="#[4]">_NextPixel_NextLine</a> from GUI_BMP.o(.text) referenced 2 times from GUI_BMP.o(.data)
 <LI><a href="#[3]">_NextPixel_SetPixel</a> from GUI_BMP.o(.text) referenced 2 times from GUI_BMP.o(.data)
 <LI><a href="#[2]">_NextPixel_Start</a> from GUI_BMP.o(.text) referenced 2 times from GUI_BMP.o(.data)
 <LI><a href="#[5f]">_Off</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[5e]">_On</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[47]">_OnExit</a> from GUI_Alloc.o(.text) referenced 8 times from GUI_Alloc.o(.text)
 <LI><a href="#[66]">_ReadRect</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[7b]">_ReadRectFromMemdev</a> from GUI_SetAlpha.o(.text) referenced from GUI_SetAlpha.o(.text)
 <LI><a href="#[5b]">_SetAlpha</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[60]">_SetAlphaMode</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[f4]">_SetBkColor</a> from LCD.o(.text) referenced from LCD.o(.constdata)
 <LI><a href="#[62]">_SetChroma</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[61]">_SetChromaMode</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[f3]">_SetColor</a> from LCD.o(.text) referenced from LCD.o(.constdata)
 <LI><a href="#[65]">_SetDevFunc</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[f5]">_SetDrawMode</a> from LCD.o(.text) referenced from LCD.o(.constdata)
 <LI><a href="#[cc]">_SetOrg</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[ca]">_SetPixelIndex</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[59]">_SetPos</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[58]">_SetSize</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[56]">_SetVRAMAddr</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[57]">_SetVSize</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[5c]">_SetVis</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[64]">_ShowBuffer</a> from GUIDRV_Lin_16.o(.text) referenced from GUIDRV_Lin_16.o(.text)
 <LI><a href="#[cb]">_XorPixel</a> from GUIDRV_Lin_16.o(.text) referenced 5 times from GUIDRV_Lin_16.o(.constdata)
 <LI><a href="#[ac]">__get_char</a> from monitor.o(i.__get_char) referenced from monitor.o(i.monitor_init)
 <LI><a href="#[45]">__low_level_init</a> from bsp.o(i.__low_level_init) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[46]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[ab]">__put_char</a> from monitor.o(i.__put_char) referenced from monitor.o(i.monitor_init)
 <LI><a href="#[91]">__task_BSP_processKS</a> from bsp.o(i.__task_BSP_processKS) referenced from bsp.o(i.KS_init)
 <LI><a href="#[90]">__task_Communication</a> from communication.o(i.__task_Communication) referenced from communication.o(i.CommInit)
 <LI><a href="#[94]">__task_Serial_DbgFRMWRK</a> from serial.o(i.__task_Serial_DbgFRMWRK) referenced from serial.o(i.SerialInit)
 <LI><a href="#[83]">_cbBk_Desktop</a> from azpallmetal.o(i._cbBk_Desktop) referenced from azpallmetal.o(i.AZP_AllMetal)
 <LI><a href="#[87]">_cbBk_Desktop</a> from azpdisc.o(i._cbBk_Desktop) referenced from azpdisc.o(i.AZP_Disc)
 <LI><a href="#[89]">_cbBk_Desktop</a> from azpfast.o(i._cbBk_Desktop) referenced from azpfast.o(i.AZP_Fast)
 <LI><a href="#[8b]">_cbBk_Desktop</a> from azploading.o(i._cbBk_Desktop) referenced from azploading.o(i.AZP_Loading)
 <LI><a href="#[8e]">_cbBk_Desktop</a> from azpmenu.o(i._cbBk_Desktop) referenced from azpmenu.o(i.AZP_Menu)
 <LI><a href="#[8c]">_cbDraw_MidWin</a> from azploading.o(i._cbDraw_MidWin) referenced from azploading.o(i.AZP_Loading)
 <LI><a href="#[85]">_cbLDraw</a> from azpallmetal.o(i._cbLDraw) referenced from azpallmetal.o(i.AZP_AllMetal)
 <LI><a href="#[84]">_cbMidDraw</a> from azpallmetal.o(i._cbMidDraw) referenced from azpallmetal.o(i.AZP_AllMetal)
 <LI><a href="#[88]">_cbMidDraw</a> from azpdisc.o(i._cbMidDraw) referenced from azpdisc.o(i.AZP_Disc)
 <LI><a href="#[8a]">_cbMidDraw</a> from azpfast.o(i._cbMidDraw) referenced from azpfast.o(i.AZP_Fast)
 <LI><a href="#[8f]">_cbMidDraw</a> from azpmenu.o(i._cbMidDraw) referenced from azpmenu.o(i.AZP_Menu)
 <LI><a href="#[6f]">_cbPaintMemDev</a> from WM.o(.text) referenced 2 times from WM.o(.text)
 <LI><a href="#[86]">_cbRDraw</a> from azpallmetal.o(i._cbRDraw) referenced from azpallmetal.o(i.AZP_AllMetal)
 <LI><a href="#[93]">_cbStatus</a> from statusbar.o(i._cbStatus) referenced from statusbar.o(i.SB_init)
 <LI><a href="#[72]">_cbTimer</a> from WM_Timer.o(.text) referenced from WM_Timer.o(.text)
 <LI><a href="#[6a]">_free_fn</a> from GUI_PNG.o(.text) referenced from GUI_PNG.o(.text)
 <LI><a href="#[6b]">_malloc_fn</a> from GUI_PNG.o(.text) referenced from GUI_PNG.o(.text)
 <LI><a href="#[6c]">_png_cexcept_error</a> from GUI_PNG.o(.text) referenced from GUI_PNG.o(.text)
 <LI><a href="#[6d]">_png_read_data</a> from GUI_PNG.o(.text) referenced from GUI_PNG.o(.text)
 <LI><a href="#[80]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[7f]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[96]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[97]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[70]">cbBackWin</a> from WM.o(.text) referenced from WM.o(.text)
 <LI><a href="#[81]">isspace</a> from isspace_c.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[43]">main</a> from guidemo_start.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[79]">png_zalloc</a> from png.o(.text) referenced from pngread.o(.text)
 <LI><a href="#[7a]">png_zfree</a> from png.o(.text) referenced from pngread.o(.text)
 <LI><a href="#[ae]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[ad]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[af]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[aa]">vGUITask</a> from guidemo_start.o(i.vGUITask) referenced from guidemo_start.o(i.main)
 <LI><a href="#[95]">vTimerCallback</a> from uartint.o(i.vTimerCallback) referenced from uartint.o(i.UartInt_init)
 <LI><a href="#[7d]">zcalloc</a> from zutil.o(.text) referenced from inflate.o(.text)
 <LI><a href="#[7e]">zcfree</a> from zutil.o(.text) referenced from inflate.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[46]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[6a3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[11f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3be]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6a5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6a6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6a7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[6a8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[51c]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[477]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>

<P><STRONG><a name="[479]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6a9]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>GUI_DispStringAt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, GUI_DispStringAt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
</UL>

<P><STRONG><a name="[126]"></a>GUI_SetBkColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, GUI_SetColor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_SetBkColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbRDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbLDraw
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
</UL>

<P><STRONG><a name="[128]"></a>GUI_SetColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, GUI_SetColor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_SetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_submenu
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_lang
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_depth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbRDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbLDraw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
</UL>

<P><STRONG><a name="[4ef]"></a>WM_SetCreateFlags</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, WM_SetCreateFlags.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6aa]"></a>GUICC_M565_SetCustColorConv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUICC_M565.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_fn
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GUI_USAGE_BM_Delete
</UL>

<P><STRONG><a name="[224]"></a>GUI_ALLOC_p2h</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_fn
</UL>

<P><STRONG><a name="[173]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[134]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[136]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_fn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[236]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteSecure
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveFromLinList
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>

<P><STRONG><a name="[13c]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetTimerId
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetUserDataEx
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetUserDataEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_fn
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateStatic
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_MarkDirty
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_Select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetStaticDevice
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetColorConv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetDelay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetTime
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveTo
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[13e]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetTimerId
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetUserDataEx
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetUserDataEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_fn
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateStatic
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_MarkDirty
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_Select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetStaticDevice
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetColorConv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetDelay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetTime
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimer
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveTo
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[46e]"></a>GUI_ALLOC_GetNumFreeBytes</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Mem_Data
</UL>

<P><STRONG><a name="[6ab]"></a>GUI_ALLOC_GetNumFreeBlocks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_Alloc.o(.text), UNUSED)

<P><STRONG><a name="[6ac]"></a>GUI_ALLOC_GetNumUsedBytes</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_Alloc.o(.text), UNUSED)

<P><STRONG><a name="[6ad]"></a>GUI_ALLOC_GetNumUsedBlocks</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_Alloc.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>GUI_ALLOC_GetMaxSize</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
</UL>

<P><STRONG><a name="[138]"></a>GUI_ALLOC_RequestSize</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_ALLOC_RequestSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[1b1]"></a>GUI_ALLOC_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_Draw
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSizeEx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSizeEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[1b3]"></a>GUI_ALLOC_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_Draw
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSizeEx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSizeEx
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[433]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[434]"></a>GUI_ALLOC_SetAvBlockSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[280]"></a>GUI_ALLOC_GetSize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetUserDataEx
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetUserDataEx
</UL>

<P><STRONG><a name="[139]"></a>GUI_ALLOC_FreePtr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, GUI_Alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[13a]"></a>GUI_ALLOC_FreePtrArray</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, GUI_Alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[6ae]"></a>GUI_ALLOC_SetMaxPercentage</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, GUI_Alloc.o(.text), UNUSED)

<P><STRONG><a name="[6af]"></a>GUI_BMP__ReadData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUI_BMP.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>GUI_BMP__ReadPalette</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, GUI_BMP.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>

<P><STRONG><a name="[147]"></a>GUI_BMP__Init</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_BMP__Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>

<P><STRONG><a name="[14b]"></a>GUI_BMP__GetData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_BMP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetYSize
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetXSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_BMP.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>GUI_BMP_GetXSizeEx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, GUI_BMP.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>

<P><STRONG><a name="[14a]"></a>GUI_BMP_GetXSize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, GUI_BMP.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__GetData
</UL>

<P><STRONG><a name="[14c]"></a>GUI_BMP_GetYSizeEx</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, GUI_BMP.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>

<P><STRONG><a name="[14d]"></a>GUI_BMP_GetYSize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, GUI_BMP.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__GetData
</UL>

<P><STRONG><a name="[14e]"></a>GUI_BMP_DrawEx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, GUI_BMP.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>

<P><STRONG><a name="[150]"></a>GUI_BMP_Draw</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = GUI_BMP_Draw &rArr; _Draw &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
</UL>

<P><STRONG><a name="[6b0]"></a>GUI_BMP_DisableAlpha</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUI_BMP.o(.text), UNUSED)

<P><STRONG><a name="[6b1]"></a>GUIPROP__FindChar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, GUI_CharP.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>GUIPROP_DispChar</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, GUI_CharP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUIPROP_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Address Reference Count : 7]<UL><LI> FD48.o(.constdata)
<LI> F16B_ASCII.o(.constdata)
<LI> FD64.o(.constdata)
<LI> F20B_ASCII.o(.constdata)
<LI> FD80.o(.constdata)
<LI> F24B_ASCII.o(.constdata)
<LI> F32B_ASCII.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, GUI_CharP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUIPROP_GetCharDistX
</UL>
<BR>[Address Reference Count : 7]<UL><LI> FD48.o(.constdata)
<LI> F16B_ASCII.o(.constdata)
<LI> FD64.o(.constdata)
<LI> F20B_ASCII.o(.constdata)
<LI> FD80.o(.constdata)
<LI> F24B_ASCII.o(.constdata)
<LI> F32B_ASCII.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_CharP.o(.text))
<BR>[Address Reference Count : 7]<UL><LI> FD48.o(.constdata)
<LI> F16B_ASCII.o(.constdata)
<LI> FD64.o(.constdata)
<LI> F20B_ASCII.o(.constdata)
<LI> FD80.o(.constdata)
<LI> F24B_ASCII.o(.constdata)
<LI> F32B_ASCII.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, GUI_CharP.o(.text))
<BR>[Address Reference Count : 7]<UL><LI> FD48.o(.constdata)
<LI> F16B_ASCII.o(.constdata)
<LI> FD64.o(.constdata)
<LI> F20B_ASCII.o(.constdata)
<LI> FD80.o(.constdata)
<LI> F24B_ASCII.o(.constdata)
<LI> F32B_ASCII.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>GL_DrawCircle</STRONG> (Thumb, 386 bytes, Stack size 56 bytes, GUI_Circ.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw8Point
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
</UL>

<P><STRONG><a name="[15c]"></a>GUI_DrawCircle</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, GUI_Circ.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircle
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[28f]"></a>GL_FillCircle</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, GUI_Circ.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>

<P><STRONG><a name="[15d]"></a>GUI_FillCircle</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, GUI_Circ.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[15e]"></a>GL_FillEllipse</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, GUI_Circ.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>

<P><STRONG><a name="[160]"></a>GUI_FillEllipse</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, GUI_Circ.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[162]"></a>GL_DrawEllipse</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, GUI_Circ.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>

<P><STRONG><a name="[163]"></a>GUI_DrawEllipse</STRONG> (Thumb, 510 bytes, Stack size 160 bytes, GUI_Circ.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[6b2]"></a>GUI_SetFuncGetpPalConvTable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_Core.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>GUI_SetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_Core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[164]"></a>GUI_ClearRect</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, GUI_Core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[165]"></a>GUI_Clear</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, GUI_Core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_Clear &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbRDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbLDraw
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
</UL>

<P><STRONG><a name="[12f]"></a>GUI__RegisterExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_Core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[167]"></a>GUI__Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, GUI_Core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[16a]"></a>GUI_Init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, GUI_Core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b3]"></a>GUI_Exit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, GUI_Core.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>GUI_DEVICE__GetpDevice</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, GUI_Device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[19d]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, GUI_Device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Refresh
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPos
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntry
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetChroma
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetChromaMode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAlphaMode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPos
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVis
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSize
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSize
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAlpha
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RefreshEx
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetChromaEx
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetChromaModeEx
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAlphaModeEx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVisEx
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAlphaEx
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelMax
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeMax
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpfIndex2ColorEx
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXY
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorY
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorX
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYMag
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXMag
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixel
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSize
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSize
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYMagEx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXMagEx
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_End
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_Begin
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_EndEx
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_BeginEx
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpfColor2IndexEx
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AssignCursorLayer
</UL>

<P><STRONG><a name="[172]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, GUI_Device.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[174]"></a>GUI_DEVICE_Create</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, GUI_Device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[371]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, GUI_Device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[176]"></a>GUI_DEVICE_Link</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, GUI_Device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[175]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, GUI_Device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[2a2]"></a>GUI_DEVICE_UnlinkTaskDevices</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, GUI_Device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[2a3]"></a>GUI_DEVICE_LinkDevices</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, GUI_Device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_DEVICE_LinkDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[177]"></a>GUI_WrapGetNumLines</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, GUI_DispStringInRectWrap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[179]"></a>GUI_DispStringInRectWrap</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, GUI_DispStringInRectWrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GUI_DispStringInRectWrap &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetClipRect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_submenu
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_lang
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_depth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
</UL>

<P><STRONG><a name="[17f]"></a>GUI_DrawGradientRoundedV</STRONG> (Thumb, 430 bytes, Stack size 192 bytes, GUI_DrawGradientRounded.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GUI_DrawGradientRoundedV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
</UL>

<P><STRONG><a name="[180]"></a>GUI_DrawGradientRoundedH</STRONG> (Thumb, 416 bytes, Stack size 184 bytes, GUI_DrawGradientRounded.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GUI_DrawGradientRoundedH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
</UL>

<P><STRONG><a name="[181]"></a>GUI_DrawHLine</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, GUI_DrawHLine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_DrawHLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[6b4]"></a>GUI_sin</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, GUI_DrawLine.o(.text), UNUSED)

<P><STRONG><a name="[6b5]"></a>GUI_cos</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, GUI_DrawLine.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>GL_DrawLine1Ex</STRONG> (Thumb, 908 bytes, Stack size 40 bytes, GUI_DrawLine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1
</UL>

<P><STRONG><a name="[184]"></a>GL_DrawLine1</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GUI_DrawLine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[185]"></a>GL_DrawLineEx</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, GUI_DrawLine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineTo
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineToEx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>

<P><STRONG><a name="[187]"></a>GL_DrawLine</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GUI_DrawLine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[188]"></a>GUI_DrawLine</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, GUI_DrawLine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GUI_DrawLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
</UL>

<P><STRONG><a name="[189]"></a>GUI_DrawLineRel</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, GUI_DrawLine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRel
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[18b]"></a>GL_DrawLineToEx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, GUI_DrawLine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[18c]"></a>GL_DrawLineTo</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, GUI_DrawLine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[18d]"></a>GUI_DrawLineTo</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, GUI_DrawLine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MoveTo
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[18f]"></a>GUI_DrawRoundedRect</STRONG> (Thumb, 412 bytes, Stack size 152 bytes, GUI_DrawRoundedRect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_submenu
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_lang
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_depth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbRDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbLDraw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
</UL>

<P><STRONG><a name="[190]"></a>GUI_DrawVLine</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, GUI_DrawVLine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GUI_DrawVLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[191]"></a>GUI_Exec1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, GUI_Exec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GUI_Exec1 &rArr; WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[193]"></a>GUI_Exec</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, GUI_Exec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[194]"></a>GUI_FillRect</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, GUI_FillRect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_FillRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
</UL>

<P><STRONG><a name="[195]"></a>GUI_FillRoundedRect</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, GUI_FillRoundedRect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GUI_FillRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_submenu
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_lang
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_depth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbRDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbLDraw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
</UL>

<P><STRONG><a name="[196]"></a>GUI_FillRoundedFrame</STRONG> (Thumb, 264 bytes, Stack size 96 bytes, GUI_FillRoundedRect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[197]"></a>GUI_GetBkColorIndex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GUI_GetColor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[159]"></a>GUI_GetBkColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, GUI_GetColor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[19a]"></a>GUI_GetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GUI_GetColor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[158]"></a>GUI_GetColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, GUI_GetColor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_GetColor &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[19c]"></a>GUI_MULTIBUF_BeginEx</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, GUI_MULTIBUF.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[19e]"></a>GUI_MULTIBUF_EndEx</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, GUI_MULTIBUF.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[6b6]"></a>GUI_MULTIBUF_ConfirmEx</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, GUI_MULTIBUF.o(.text), UNUSED)

<P><STRONG><a name="[6b7]"></a>GUI_MULTIBUF_ConfigEx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, GUI_MULTIBUF.o(.text), UNUSED)

<P><STRONG><a name="[6b8]"></a>GUI_MULTIBUF_GetNumBuffersEx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, GUI_MULTIBUF.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>GUI_MULTIBUF_Begin</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, GUI_MULTIBUF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MULTIBUF_Begin
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM_MULTIBUF.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>GUI_MULTIBUF_End</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, GUI_MULTIBUF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_MULTIBUF_End
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM_MULTIBUF.o(.constdata)
</UL>
<P><STRONG><a name="[43b]"></a>GUI_MULTIBUF_Confirm</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, GUI_MULTIBUF.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IRQHandler
</UL>

<P><STRONG><a name="[43c]"></a>GUI_MULTIBUF_Config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, GUI_MULTIBUF.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[6b9]"></a>GUI_MULTIBUF_GetNumBuffers</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, GUI_MULTIBUF.o(.text), UNUSED)

<P><STRONG><a name="[6ba]"></a>GUI_MULTIBUF_UseSingleBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUI_MULTIBUF.o(.text), UNUSED)

<P><STRONG><a name="[6bb]"></a>GUI_GetKey</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_OnKey.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>GUI_StoreKey</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, GUI_OnKey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
</UL>

<P><STRONG><a name="[1a1]"></a>GUI_ClearKeyBuffer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, GUI_OnKey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_ClearKeyBuffer &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[1a2]"></a>GUI_StoreKeyMsg</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, GUI_OnKey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_BSP_processKS
</UL>

<P><STRONG><a name="[1a3]"></a>GUI_PollKeyMsg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, GUI_OnKey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI_PollKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[1a5]"></a>GUI_SendKeyMsg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, GUI_OnKey.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>

<P><STRONG><a name="[6bc]"></a>GUI_GetKeyState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, GUI_OnKey.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>GUI_GetPenSize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GUI_Pen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_GetPenSize &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipse
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipse
</UL>

<P><STRONG><a name="[1a6]"></a>GUI_GetPenShape</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GUI_Pen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[1a7]"></a>GUI_SetPenSize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, GUI_Pen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_SetPenSize &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
</UL>

<P><STRONG><a name="[1a8]"></a>GUI_SetPenShape</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, GUI_Pen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[1a9]"></a>GUI_SetFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GUI_SetFont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_SetFont &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF_CreateFont
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_submenu
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_lang
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_depth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
</UL>

<P><STRONG><a name="[1aa]"></a>GUI_SetTextMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, GUI_SetTextMode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_submenu
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_lang
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_depth
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
</UL>

<P><STRONG><a name="[1ab]"></a>GUI_SIF__GetNumCharAreas</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GUI_SIF.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
</UL>

<P><STRONG><a name="[1ac]"></a>GUI_SIF__GetpCharInfo</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, GUI_SIF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_SIF__GetpCharInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[be]"></a>GUI_SIF__GetCharDistX</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, GUI_SIF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SIF__GetCharDistX
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SIF_Prop.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>GUI_SIF__GetFontInfo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, GUI_SIF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_SIF__GetFontInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SIF_Prop.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>GUI_SIF__IsInFont</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, GUI_SIF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_SIF__IsInFont
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SIF_Prop.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>GUI_SIF_CreateFont</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, GUI_SIF.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GUI_SIF_CreateFont &rArr; GUI_SetFont &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
</UL>

<P><STRONG><a name="[6bd]"></a>GUI_SIF_DeleteFont</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, GUI_SIF.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>GUI_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, GUI_Time.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
</UL>

<P><STRONG><a name="[1b0]"></a>GUI_Delay</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, GUI_Time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[1b4]"></a>GUI__BIDI_Log2VisBuffered</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, GUI_UC_EnableBIDI.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = GUI__BIDI_Log2VisBuffered &rArr; GUI__BIDI_Log2Vis &rArr; _DoJoiningAndDecoding &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_Log2Vis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>GUI_UC_EnableBIDI</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, GUI_UC_EnableBIDI.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_UC_EnableBIDI &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
</UL>

<P><STRONG><a name="[1b6]"></a>GUI_UC_SetEncodeUTF8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GUI_UC_EncodeUTF8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_UC_SetEncodeUTF8 &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
</UL>

<P><STRONG><a name="[4a4]"></a>GUI__memcpy</STRONG> (Thumb, 290 bytes, Stack size 4 bytes, GUI__memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI__memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_CopyBuffer
</UL>

<P><STRONG><a name="[1b7]"></a>LCD_GetXSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1b8]"></a>LCD_GetYSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1b9]"></a>LCD_GetVXSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVXSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[1ba]"></a>LCD_GetVYSizeEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVYSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[1bb]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetBitsPerPixelEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
</UL>

<P><STRONG><a name="[1bc]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColorsEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[1bd]"></a>LCD_GetXMagEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1be]"></a>LCD_GetYMagEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1bf]"></a>LCD_GetMirrorXEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetMirrorXEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[1c0]"></a>LCD_GetMirrorYEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetMirrorYEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[1c1]"></a>LCD_GetSwapXYEx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetSwapXYEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[1c2]"></a>LCD_GetXSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSize
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[1c3]"></a>LCD_GetYSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[1c4]"></a>LCD_GetVXSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1c5]"></a>LCD_GetVYSize</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1c6]"></a>LCD_GetBitsPerPixel</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRect
</UL>

<P><STRONG><a name="[1c7]"></a>LCD_GetNumColors</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[1c8]"></a>LCD_GetXMag</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1c9]"></a>LCD_GetYMag</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1ca]"></a>LCD_GetMirrorX</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1cb]"></a>LCD_GetMirrorY</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1cc]"></a>LCD_GetSwapXY</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[13b]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, LCD_GetEx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[6be]"></a>LCD_GetDevFunc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, LCD_GetEx.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>LCD_GetPaletteEx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1ce]"></a>LCD_GetPalette</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPalette
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[1cf]"></a>LCD_GetpfIndex2ColorEx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[225]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, LCD_GetEx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[153]"></a>LCD_GetpfColor2IndexEx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetpfColor2IndexEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>

<P><STRONG><a name="[145]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, LCD_GetEx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[1d0]"></a>LCD_GetXSizeMax</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1d1]"></a>LCD_GetYSizeMax</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1d2]"></a>LCD_GetVXSizeMax</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, LCD_GetEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetVXSizeMax
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[1d3]"></a>LCD_GetVYSizeMax</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1d4]"></a>LCD_GetBitsPerPixelMax</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, LCD_GetEx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[6bf]"></a>LCD__GetBPP</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, LCD_GetEx.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, LCD_GetEx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[1d5]"></a>LCD_SetAlphaEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerAlphaEx
</UL>

<P><STRONG><a name="[1d6]"></a>LCD_SetVRAMAddrEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, LCD_Set.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SetVRAMAddrEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[1d7]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, LCD_Set.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[1d8]"></a>LCD_SetSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, LCD_Set.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerSizeEx
</UL>

<P><STRONG><a name="[1d9]"></a>LCD_SetVisEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerVisEx
</UL>

<P><STRONG><a name="[1da]"></a>LCD_SetPosEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, LCD_Set.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPosEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
</UL>

<P><STRONG><a name="[1db]"></a>LCD_SetAlphaModeEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1dc]"></a>LCD_SetChromaModeEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1dd]"></a>LCD_SetChromaEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1de]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, LCD_Set.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUT
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEx
</UL>

<P><STRONG><a name="[1df]"></a>LCD_GetPosEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>

<P><STRONG><a name="[1e0]"></a>LCD_RefreshEx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e1]"></a>LCD_SetAlpha</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e2]"></a>LCD_SetVRAMAddr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e3]"></a>LCD_SetVSize</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e4]"></a>LCD_SetSize</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e5]"></a>LCD_SetVis</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e6]"></a>LCD_SetPos</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e7]"></a>LCD_SetAlphaMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e8]"></a>LCD_SetChromaMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1e9]"></a>LCD_SetChroma</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1ea]"></a>LCD_SetLUTEntry</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1eb]"></a>LCD_GetPos</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1ec]"></a>LCD_Refresh</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, LCD_Set.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[1ed]"></a>LCD_SetDevFunc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, LCD_Set.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetDevFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[1f0]"></a>GUI_MEMDEV__WriteToActiveAt</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, GUIDEV.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
</UL>

<P><STRONG><a name="[1f1]"></a>GUI_MEMDEV__CreateFixed</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, GUIDEV.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[1f5]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, GUIDEV.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_GetBitsPerPixel &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[1f6]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, GUIDEV.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
</UL>

<P><STRONG><a name="[1f9]"></a>GUI_MEMDEV_CreateEx</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, GUIDEV.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[1fa]"></a>GUI_MEMDEV_Create</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, GUIDEV.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[1fb]"></a>GUI_MEMDEV_Select</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, GUIDEV.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GUI_MEMDEV_Select &rArr; WM_Deactivate &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[1ff]"></a>GUI_MEMDEV_CopyToLCDAt</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, GUIDEV.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
</UL>

<P><STRONG><a name="[203]"></a>GUI_MEMDEV_CopyToLCD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUIDEV.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[204]"></a>GUI_MEMDEV_MarkDirty</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, GUIDEV.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>

<P><STRONG><a name="[206]"></a>GUI_MEMDEV_CreateFixed</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, GUIDEV_CreateFixed.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GUI_MEMDEV_CreateFixed &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
</UL>

<P><STRONG><a name="[207]"></a>GUI_MEMDEV_PunchOutDevice</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, GUIDEV_PunchOutDevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GUI_MEMDEV_PunchOutDevice &rArr; GUI_MEMDEV_GetColorConv &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
</UL>

<P><STRONG><a name="[20c]"></a>GUI_MEMDEV_WriteAt</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, GUIDEV_Write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_MEMDEV_WriteAt &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawHB
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
</UL>

<P><STRONG><a name="[20d]"></a>GUI_MEMDEV_Write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, GUIDEV_Write.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_MEMDEV_Write &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[20e]"></a>GUI_PNG_GetXSizeEx</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, GUI_PNG.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[211]"></a>GUI_PNG_GetXSize</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, GUI_PNG.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[212]"></a>GUI_PNG_GetYSizeEx</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, GUI_PNG.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[213]"></a>GUI_PNG_GetYSize</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, GUI_PNG.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[214]"></a>GUI_PNG_DrawEx</STRONG> (Thumb, 1082 bytes, Stack size 200 bytes, GUI_PNG.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316<LI>Call Chain = GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_p2h
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_strip_16
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gray_to_rgb
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gamma
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_expand
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_background
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_update_info
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_image
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_valid
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_rowbytes
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_gAMA
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_channels
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_bKGD
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_IHDR
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndices
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_Draw
</UL>

<P><STRONG><a name="[229]"></a>GUI_PNG_Draw</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, GUI_PNG.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1348<LI>Call Chain = GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
</UL>

<P><STRONG><a name="[230]"></a>WM__Client2Screen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>

<P><STRONG><a name="[6c0]"></a>WM__RectIsNZ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, WM.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescsEx &rArr;  WM_InvalidateWindowAndDescsEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[237]"></a>WM__InvalidateRect</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>

<P><STRONG><a name="[238]"></a>WM__InvalidateParent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WM__InvalidateParent &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[239]"></a>WM__Invalidate1Abs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[23a]"></a>WM__ClipAtParentBorders</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__ClipAtParentBorders
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateStatic
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
</UL>

<P><STRONG><a name="[23d]"></a>WM__ActivateClipRect</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>

<P><STRONG><a name="[23f]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__InsertWindowIntoList
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[240]"></a>WM__RemoveWindowFromList</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[241]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[242]"></a>WM__DetachWindow</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>

<P><STRONG><a name="[243]"></a>WM__GetTopLevelLayer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[244]"></a>WM__SelectTopLevelLayer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
</UL>

<P><STRONG><a name="[245]"></a>WM_SelectWindow</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WM_SelectWindow &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateStatic
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
</UL>

<P><STRONG><a name="[246]"></a>WM__RemoveFromLinList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>

<P><STRONG><a name="[247]"></a>WM__SendMsgNoData</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[249]"></a>WM__IsWindow</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>

<P><STRONG><a name="[24a]"></a>WM_DeleteWindow</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WM_DeleteWindow &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_delete
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
</UL>

<P><STRONG><a name="[24e]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + In Cycle
<LI>Call Chain = WM__InvalidateDrawAndDescs &rArr;  WM__InvalidateDrawAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>

<P><STRONG><a name="[24f]"></a>WM_SendMessage</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_Serial_DbgFRMWRK
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
</UL>

<P><STRONG><a name="[361]"></a>WM__GetClientRectWin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, WM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
</UL>

<P><STRONG><a name="[250]"></a>WM_InvalidateRect</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
</UL>

<P><STRONG><a name="[251]"></a>WM_InvalidateWindow</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_comm_timeout
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
</UL>

<P><STRONG><a name="[252]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 350 bytes, Stack size 80 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindow
</UL>

<P><STRONG><a name="[254]"></a>WM_CreateWindow</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[26c]"></a>WM_GetActiveWindow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, WM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>

<P><STRONG><a name="[155]"></a>WM__GetNextIVR</STRONG> (Thumb, 840 bytes, Stack size 72 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipse
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipse
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>

<P><STRONG><a name="[152]"></a>WM__InitIVRSearch</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipse
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipse
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>

<P><STRONG><a name="[259]"></a>WM_SetDefault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateStatic
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
</UL>

<P><STRONG><a name="[25b]"></a>WM__Paint1</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = WM__Paint1 &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text)
</UL>
<P><STRONG><a name="[25f]"></a>WM__Paint</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>

<P><STRONG><a name="[261]"></a>WM__DeleteSecure</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, WM.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[192]"></a>WM_Exec</STRONG> (Thumb, 534 bytes, Stack size 272 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = WM_Exec &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
</UL>

<P><STRONG><a name="[265]"></a>WM_DefaultProc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbRDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbLDraw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>

<P><STRONG><a name="[202]"></a>WM_Activate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, WM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[1fc]"></a>WM_Deactivate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WM_Deactivate &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[170]"></a>WM_Init</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[16c]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, WM_GetDesktopWindow.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[26a]"></a>WM_GetFocussedWindow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, WM_GetFocussedWindow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WM_GetFocussedWindow &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_Serial_DbgFRMWRK
</UL>

<P><STRONG><a name="[6c1]"></a>WM__GetWindowSizeX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, WM_GetWindowSize.o(.text), UNUSED)

<P><STRONG><a name="[6c2]"></a>WM__GetWindowSizeY</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, WM_GetWindowSize.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>WM_GetWindowSizeX</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, WM_GetWindowSize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WM_GetWindowSizeX &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetActiveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
</UL>

<P><STRONG><a name="[26d]"></a>WM_GetWindowSizeY</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, WM_GetWindowSize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WM_GetWindowSizeY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetActiveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
</UL>

<P><STRONG><a name="[3f4]"></a>WM_MULTIBUF_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, WM_MULTIBUF.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[26e]"></a>WM_SetCallback</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, WM_SetCallback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WM_SetCallback &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[26f]"></a>WM_SetFocus</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, WM_SetFocus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[272]"></a>WM_SetSize</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, WM_SetSize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[274]"></a>WM_DeleteTimer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, WM_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
</UL>

<P><STRONG><a name="[24b]"></a>WM__DeleteAssocTimer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, WM_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WM__DeleteAssocTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[279]"></a>WM_CreateTimer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, WM_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WM_CreateTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
</UL>

<P><STRONG><a name="[27c]"></a>WM_RestartTimer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, WM_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WM_RestartTimer &rArr; GUI_TIMER_Restart &rArr; _Link
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
</UL>

<P><STRONG><a name="[27e]"></a>WM_GetTimerId</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, WM_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WM_GetTimerId &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
</UL>

<P><STRONG><a name="[27f]"></a>WM__GetUserDataEx</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, WM_UserData.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[281]"></a>WM__SetUserDataEx</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, WM_UserData.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[282]"></a>WM_GetUserData</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, WM_UserData.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WM_GetUserData &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbRDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbLDraw
</UL>

<P><STRONG><a name="[283]"></a>WM_SetUserData</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, WM_UserData.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WM_SetUserData &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[76]"></a>LCD_Index2Color_8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, GUICC_8888_Index2Color.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> GUICC_8888.o(.constdata)
<LI> GUI__Alpha.o(.text)
<LI> GUIDEV_WriteToActiveAlpha.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>LCD_Index2Color_M555</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, GUICC_M555_Index2Color.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_BMP.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, GUICC_M565_Index2Color.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>GUI_MoveRel</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, GUI_2DLib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
</UL>

<P><STRONG><a name="[18e]"></a>GL_MoveTo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_2DLib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
</UL>

<P><STRONG><a name="[284]"></a>GUI_MoveTo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, GUI_2DLib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[285]"></a>GUI_DrawRect</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, GUI_2DLib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[1f4]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, GUI_ALLOC_AllocZero.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[17a]"></a>GUI_GetFontDistY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, GUI_Char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[286]"></a>GUI_DispNextLine</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, GUI_Char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[287]"></a>GL_DispChar</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, GUI_Char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[288]"></a>GUI_GetYAdjust</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, GUI_Char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[289]"></a>GUI_GetCharDistX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, GUI_Char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetWordWrap
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosChar
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCharWrap
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharWrap
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWordWrap
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosChar
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosX
</UL>

<P><STRONG><a name="[28a]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, GUI_Char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
</UL>

<P><STRONG><a name="[28b]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, GUI_CharLine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
</UL>

<P><STRONG><a name="[28d]"></a>GUI__GetOverlap</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, GUI_CharLine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
</UL>

<P><STRONG><a name="[17d]"></a>GUI__GetLineDistX</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, GUI_CharLine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GUI__GetLineDistX &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[17e]"></a>GUI__DispLine</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, GUI_CharLine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[124]"></a>GUI_DispString</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, GUI_DispString.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[183]"></a>GL_DrawPoint</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, GUI_DrawPoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[290]"></a>GUI_DrawPoint</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, GUI_DrawPoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[186]"></a>GL_FillPolygon</STRONG> (Thumb, 604 bytes, Stack size 64 bytes, GUI_FillPolygon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GL_FillPolygon
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
</UL>

<P><STRONG><a name="[291]"></a>GUI_FillPolygon</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, GUI_FillPolygon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[292]"></a>GUI_GotoY</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, GUI_Goto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[293]"></a>GUI_GotoX</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, GUI_Goto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[166]"></a>GUI_GotoXY</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GUI_Goto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateStatic
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
</UL>

<P><STRONG><a name="[269]"></a>GUI_MergeRect</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, GUI_MergeRect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[231]"></a>GUI_MoveRect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, GUI_MoveRect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[255]"></a>GUI_RectsIntersect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, GUI_RectsIntersect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>

<P><STRONG><a name="[263]"></a>GUI_SaveContext_W</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI_SaveContext.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_SaveContext_W &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[264]"></a>GUI_RestoreContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, GUI_SaveContext.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_RestoreContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[201]"></a>GUI_SelectLayer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, GUI_SelectLayer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[294]"></a>GUI_AssignCursorLayer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, GUI_SelectLayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>

<P><STRONG><a name="[621]"></a>GUI_GetCursorLayer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, GUI_SelectLayer.o(.text), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[295]"></a>GUI_SetLayerPosEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, GUI_SelectLayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[296]"></a>GUI_SetLayerSizeEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, GUI_SelectLayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[297]"></a>GUI_SetLayerVisEx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GUI_SelectLayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVisEx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[298]"></a>GUI_SetLayerAlphaEx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, GUI_SelectLayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetAlphaEx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[299]"></a>GUI_GetLayerPosEx</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, GUI_SelectLayer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[1f7]"></a>GUI_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, GUI_SelectLCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[17b]"></a>GUI_SetClipRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, GUI_SetClipRect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_SetClipRect &rArr; WM_SetUserClipRect &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[25a]"></a>GL_SetDefault</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, GUI_SetDefault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GL_SetDefault &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
</UL>

<P><STRONG><a name="[29e]"></a>GUI_SetDefault</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, GUI_SetDefault.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
</UL>

<P><STRONG><a name="[200]"></a>GUI_SetDrawMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, GUI_SetDrawMode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
</UL>

<P><STRONG><a name="[16f]"></a>GUI_SetOrg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUI_SetOrg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_SetOrg &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[29c]"></a>GUI_SetTextAlign</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, GUI_SetTextAlign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_SetTextAlign &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
</UL>

<P><STRONG><a name="[125]"></a>GUI_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, GUI_Task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_EnableBIDI
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetTimerId
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_Draw
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocussedWindow
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenShape
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenShape
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColorIndex
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColorIndex
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedFrame
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRel
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetClipRect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipse
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipse
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveTo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetUserDataEx
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetUserDataEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSizeEx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSizeEx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_MarkDirty
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_Select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetStaticDevice
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetColorConv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_ConvertUC2UTF8
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeNone
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetDelay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetTime
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__IsActive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerAlphaEx
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerVisEx
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerSizeEx
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoX
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoY
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
</UL>

<P><STRONG><a name="[123]"></a>GUI_Lock</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, GUI_Task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_EnableBIDI
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetTimerId
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_Draw
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocussedWindow
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenShape
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenShape
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColorIndex
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColorIndex
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedFrame
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRel
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetClipRect
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipse
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipse
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveTo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetUserDataEx
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetUserDataEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSizeEx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSizeEx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_MarkDirty
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_Select
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetStaticDevice
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetColorConv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_ConvertUC2UTF8
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeNone
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetDelay
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetTime
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__IsActive
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_GetpContext
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerAlphaEx
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerVisEx
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerSizeEx
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoX
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoY
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DispChar
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispNextLine
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
</UL>

<P><STRONG><a name="[16d]"></a>GUITASK_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, GUI_Task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUITASK_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[171]"></a>GUITASK_CopyContext</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, GUI_Task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUITASK_CopyContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[2a5]"></a>GUITASK_GetpContext</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, GUI_Task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[6c3]"></a>GUITASK_SetMaxTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, GUI_Task.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>GUI_TIMER__IsActive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, GUI_Timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[2a7]"></a>GUI_TIMER__GetPeriod</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, GUI_Timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WaitEvent
</UL>

<P><STRONG><a name="[2a8]"></a>GUI_TIMER__GetNextTimer</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, GUI_Timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>

<P><STRONG><a name="[276]"></a>GUI_TIMER__GetFirstTimer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetFirstTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[278]"></a>GUI_TIMER__GetNextTimerLin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetNextTimerLin
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[2a9]"></a>GUI_TIMER_Exec</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GUI_TIMER_Exec &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Timer.o(.text)
</UL>
<P><STRONG><a name="[27a]"></a>GUI_TIMER_Create</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
</UL>

<P><STRONG><a name="[275]"></a>GUI_TIMER_Delete</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[27b]"></a>GUI_TIMER_SetPeriod</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_TIMER_SetPeriod &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
</UL>

<P><STRONG><a name="[2ab]"></a>GUI_TIMER_GetPeriod</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, GUI_Timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>

<P><STRONG><a name="[2ac]"></a>GUI_TIMER_SetTime</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, GUI_Timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>

<P><STRONG><a name="[2ad]"></a>GUI_TIMER_SetDelay</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, GUI_Timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
</UL>

<P><STRONG><a name="[27d]"></a>GUI_TIMER_Restart</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_TIMER_Restart &rArr; _Link
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
</UL>

<P><STRONG><a name="[277]"></a>GUI_TIMER_GetFlag</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_TIMER_GetFlag &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[2ae]"></a>GUI_UC_SetEncodeNone</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GUI_UC_EncodeNone.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[6c4]"></a>GUI_SetSignalEventFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_WaitEvent.o(.text), UNUSED)

<P><STRONG><a name="[6c5]"></a>GUI_SetWaitEventFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_WaitEvent.o(.text), UNUSED)

<P><STRONG><a name="[6c6]"></a>GUI_SetWaitEventTimedFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_WaitEvent.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>GUI_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, GUI_WaitEvent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKeyMsg
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendKeyMsg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[2af]"></a>GUI_WaitEvent</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, GUI_WaitEvent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetPeriod
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__IsActive
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[c]"></a>GUI__MixColors</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, GUI__Alpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI__MixColors
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MixColors
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Alpha.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>GUI__MixColorsBulk</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, GUI__Alpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__MixColorsBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Alpha.o(.data)
</UL>
<P><STRONG><a name="[2b0]"></a>GUI__GetAlphaBuffer</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, GUI__Alpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[2b1]"></a>GUI__DoAlphaBlending</STRONG> (Thumb, 542 bytes, Stack size 96 bytes, GUI__Alpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndicesEx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[2b3]"></a>GUI__AllocAlphaBuffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, GUI__Alpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[6c7]"></a>GUI__SetAlphaBufferSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI__Alpha.o(.text), UNUSED)

<P><STRONG><a name="[6c8]"></a>GUI_SetFuncAlphaBlending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI__Alpha.o(.text), UNUSED)

<P><STRONG><a name="[6c9]"></a>GUI_SetFuncMixColors</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI__Alpha.o(.text), UNUSED)

<P><STRONG><a name="[6ca]"></a>GUI_SetFuncMixColorsBulk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI__Alpha.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>GUI__BIDI_Log2Vis</STRONG> (Thumb, 216 bytes, Stack size 384 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = GUI__BIDI_Log2Vis &rArr; _DoJoiningAndDecoding &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_ConvertUC2UTF8
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiReorder
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiDoTransformations
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_Log2VisBuffered
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>GUI__BIDI_GetCursorPosX</STRONG> (Thumb, 378 bytes, Stack size 528 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = GUI__BIDI_GetCursorPosX &rArr; _DoJoiningAndDecoding &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiReorder
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiDoTransformations
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>GUI__BIDI_GetCursorPosChar</STRONG> (Thumb, 388 bytes, Stack size 528 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = GUI__BIDI_GetCursorPosChar &rArr; _DoJoiningAndDecoding &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumBytes2NumChars
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiReorder
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiDoTransformations
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>GUI__BIDI_GetLogChar</STRONG> (Thumb, 52 bytes, Stack size 176 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = GUI__BIDI_GetLogChar &rArr; _DoJoiningAndDecoding &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>GUI__BIDI_GetCharDir</STRONG> (Thumb, 234 bytes, Stack size 368 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = GUI__BIDI_GetCharDir &rArr; _DoJoiningAndDecoding &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiDoTransformations
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorCharacter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>GUI__BIDI_IsNSM</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI__BIDI_IsNSM
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetPresentationForm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>GUI__BIDI_GetCursorCharacter</STRONG> (Thumb, 70 bytes, Stack size 184 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = GUI__BIDI_GetCursorCharacter &rArr; GUI__BIDI_GetCharDir &rArr; _DoJoiningAndDecoding &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCharDir
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>GUI__BIDI_GetWordWrap</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GUI__BIDI_GetWordWrap &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IsArabicCharacter
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetPresentationForm
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>GUI__BIDI_GetCharWrap</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = GUI__BIDI_GetCharWrap &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IsArabicCharacter
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetPresentationForm
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EnableBIDI.o(.text)
</UL>
<P><STRONG><a name="[228]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, GUI__CompactPixelIndices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
</UL>

<P><STRONG><a name="[2e0]"></a>GUI__CompactPixelIndicesEx</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, GUI__CompactPixelIndices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__CompactPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[227]"></a>GUI__ExpandPixelIndices</STRONG> (Thumb, 600 bytes, Stack size 12 bytes, GUI__ExpandPixelIndices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI__ExpandPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRect
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[2b2]"></a>GUI__ExpandPixelIndicesEx</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, GUI__ExpandPixelIndices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__ExpandPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[6cb]"></a>GUI__GetCursorPosX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, GUI__GetCursorPos.o(.text), UNUSED)

<P><STRONG><a name="[6cc]"></a>GUI__GetCursorPosChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, GUI__GetCursorPos.o(.text), UNUSED)

<P><STRONG><a name="[6cd]"></a>GUI__GetCursorCharacter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI__GetCursorPos.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>GUI__IntersectRect</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, GUI__IntersectRect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>

<P><STRONG><a name="[233]"></a>GUI__IntersectRects</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, GUI__IntersectRects.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>

<P><STRONG><a name="[2c0]"></a>GUI__ManageCacheEx</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, GUI__ManageCache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>

<P><STRONG><a name="[262]"></a>GUI__ManageCache</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUI__ManageCache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[12c]"></a>GUI__memset</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, GUI__memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[148]"></a>GUI__Read16</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, GUI__Read.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF_CreateFont
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF__IsInFont
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF__GetFontInfo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF__GetCharDistX
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF__GetpCharInfo
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF__GetNumCharAreas
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>

<P><STRONG><a name="[141]"></a>GUI__Read32</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, GUI__Read.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF_CreateFont
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetYSize
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetYSizeEx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetXSize
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetXSizeEx
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageBitfields
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLine_RGB
</UL>

<P><STRONG><a name="[15f]"></a>GUI__sqrt32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, GUI__sqrt32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedFrame
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipse
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipse
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipse
</UL>

<P><STRONG><a name="[17c]"></a>GUI__WrapGetNumCharsDisp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, GUI__Wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__WrapGetNumCharsDisp &rArr; GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[2c1]"></a>GUI__WrapGetNumCharsToNextLine</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, GUI__Wrap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>

<P><STRONG><a name="[178]"></a>GUI__WrapGetNumBytesToNextLine</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, GUI__Wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI__WrapGetNumBytesToNextLine &rArr; GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
</UL>

<P><STRONG><a name="[140]"></a>LCD_Color2Index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, LCD.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableBM
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__ReadPalette
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA_NoTrans
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA_Xor
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA
</UL>

<P><STRONG><a name="[2cd]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, LCD.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[2cc]"></a>LCD_SetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, LCD.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[157]"></a>LCD_SetDrawMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, LCD.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[bc]"></a>LCD_DrawPixel</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>LCD_DrawHLine</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedFrame
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipse
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipse
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipse
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 2]<UL><LI> GUI_Core.o(.constdata)
<LI> GUI_DrawGradientRounded.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>LCD_DrawVLine</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_DrawGradientRounded.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>LCD_FillRect</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedFrame
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
</UL>

<P><STRONG><a name="[2c2]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 514 bytes, Stack size 104 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[151]"></a>LCD_DrawBitmap</STRONG> (Thumb, 626 bytes, Stack size 80 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[1fe]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, LCD.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[16e]"></a>LCD_Init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCD_Init &rArr; LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[199]"></a>LCD_Index2Color</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, LCD.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA_NoTrans
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA_Xor
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>

<P><STRONG><a name="[127]"></a>LCD_SetBkColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, LCD.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
</UL>

<P><STRONG><a name="[129]"></a>LCD_SetColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, LCD.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
</UL>

<P><STRONG><a name="[2c3]"></a>LCD_InitColors</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, LCD_Color.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2c5]"></a>LCD_GetpPalConvTableUncached</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, LCD_Color.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>

<P><STRONG><a name="[2c6]"></a>LCD_GetpPalConvTable</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, LCD_Color.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>

<P><STRONG><a name="[a]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, LCD_Color.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTableBM
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.data)
</UL>
<P><STRONG><a name="[2c4]"></a>LCD_InitLUT</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, LCD_Color.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_InitLUT &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[6ce]"></a>LCD_SetMaxNumColors</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, LCD_Color.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, LCD_GetColorIndex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColorIndex
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[19b]"></a>LCD_GetColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, LCD_GetColorIndex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColorIndex
</UL>

<P><STRONG><a name="[226]"></a>GUI_ReadRectEx</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, LCD_ReadRect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_ReadRectEx &rArr; LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[2c9]"></a>LCD_ReadRect</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, LCD_ReadRect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[2ca]"></a>LCD_ReadRectNoClip</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, LCD_ReadRect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[2cb]"></a>GUI_ReadRect</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, LCD_ReadRect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixel
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndices
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[23e]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, LCD_SetClipRectEx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[1fd]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, LCD_UpdateColorIndices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_UpdateColorIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[370]"></a>GUI_MEMDEV__SetAlphaCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUIDEV_Banding.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[260]"></a>GUI_MEMDEV_Draw</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, GUIDEV_Banding.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>

<P><STRONG><a name="[20b]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, GUIDEV_GetDataPtr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[2d3]"></a>GUI_MEMDEV_GetXPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUIDEV_GetPos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_GetXPos &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[2d4]"></a>GUI_MEMDEV_GetYPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUIDEV_GetPos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_GetYPos &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[208]"></a>GUI_MEMDEV_GetXSize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUIDEV_GetXSize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_GetXSize &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[209]"></a>GUI_MEMDEV_GetYSize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUIDEV_GetYSize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_GetYSize &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
</UL>

<P><STRONG><a name="[2d5]"></a>GUI_MEMDEV_SetColorConv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, GUIDEV_SetColorConv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>

<P><STRONG><a name="[20a]"></a>GUI_MEMDEV_GetColorConv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, GUIDEV_SetColorConv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_GetColorConv &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
</UL>

<P><STRONG><a name="[2d6]"></a>GUI_MEMDEV_GetStaticDevice</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, GUIDEV_StaticDevices.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>

<P><STRONG><a name="[6e]"></a>GUI_MEMDEV_Paint1Static</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, GUIDEV_StaticDevices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = GUI_MEMDEV_Paint1Static &rArr; _CreateStaticDevice &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text)
</UL>
<P><STRONG><a name="[2da]"></a>GUI_MEMDEV_CreateStatic</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, GUIDEV_StaticDevices.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[2dc]"></a>GUI_MEMDEV_GetWindowDevice</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GUIDEV_StaticDevices.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[6cf]"></a>GUIDEV_StaticDevices_C</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, GUIDEV_StaticDevices.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>GUI_USAGE_Select</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, GUIDEV_Usage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>

<P><STRONG><a name="[1f8]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, GUIDEV_Usage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[205]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, GUIDEV_Usage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_MarkDirty
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[1f3]"></a>GUI_USAGE_BM_Create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, GUIDEV_UsageBM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[67]"></a>GUI_MEMDEV__WriteToActiveAlpha</STRONG> (Thumb, 274 bytes, Stack size 96 bytes, GUIDEV_WriteToActiveAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GUI_MEMDEV__WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 1878 bytes, Stack size 168 bytes, GUIDEV_WriteToActiveOpaque.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GUI_MEMDEV__WriteToActiveOpaque &rArr; LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> GUIDEV_8.o(.text)
<LI> GUIDEV_16.o(.text)
</UL>
<P><STRONG><a name="[22e]"></a>png_set_sig_bytes</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = png_set_sig_bytes &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[22d]"></a>png_sig_cmp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = png_sig_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[2e2]"></a>png_check_sig</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, png.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[79]"></a>png_zalloc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = png_zalloc &rArr; png_malloc &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pngread.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>png_zfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_zfree &rArr; png_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pngread.o(.text)
</UL>
<P><STRONG><a name="[2e6]"></a>png_reset_crc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = png_reset_crc &rArr; crc32 &rArr; crc32_big
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[2e8]"></a>png_calculate_crc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = png_calculate_crc &rArr; crc32 &rArr; crc32_big
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tRNS
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tIME
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sRGB
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sBIT
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pHYs
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_oFFs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_hIST
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_bKGD
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_PLTE
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IHDR
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_read
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
</UL>

<P><STRONG><a name="[2e9]"></a>png_info_init_3</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, png.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_struct
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[22b]"></a>png_create_info_struct</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = png_create_info_struct &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct_2
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[2ed]"></a>png_free_data</STRONG> (Thumb, 810 bytes, Stack size 32 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = png_free_data &rArr;  png_free_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_info_struct
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_destroy
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_rows
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_tRNS
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_iCCP
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_hIST
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_PLTE
</UL>

<P><STRONG><a name="[2ee]"></a>png_info_destroy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = png_info_destroy &rArr; png_free_data &rArr;  png_free_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_destroy
</UL>

<P><STRONG><a name="[2ef]"></a>png_destroy_info_struct</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, png.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_struct_2
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2f1]"></a>png_info_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, png.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_struct
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2f2]"></a>png_data_freer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, png.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>

<P><STRONG><a name="[6d0]"></a>png_get_io_ptr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[6d1]"></a>png_get_copyright</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[6d2]"></a>png_get_libpng_ver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[6d3]"></a>png_get_header_ver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[6d4]"></a>png_get_header_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>png_handle_as_unknown</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = png_handle_as_unknown &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
</UL>

<P><STRONG><a name="[2f4]"></a>png_reset_zstream</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, png.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
</UL>

<P><STRONG><a name="[6d5]"></a>png_access_version_number</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[6d6]"></a>png_mmx_support</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>png_error</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, pngerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sig_bytes
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_IHDR
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_start_row
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tRNS
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tIME
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sRGB
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sBIT
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pHYs
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_oFFs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_hIST
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_bKGD
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_PLTE
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IHDR
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IEND
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_uint_31
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_2
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_chunk_error
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_PLTE
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_IHDR
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
</UL>

<P><STRONG><a name="[2e3]"></a>png_warning</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, pngerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_read_fn
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_background
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_update_info
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_IHDR
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_rgb_to_gray
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_rgb_to_gray_fixed
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_crc_action
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_filter_row
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tRNS
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tIME
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sRGB
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sBIT
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pHYs
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_oFFs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_hIST
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_bKGD
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_PLTE
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IEND
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_chunk_warning
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_data_freer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_zalloc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_unknown_chunks
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_pCAL
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_iCCP
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_hIST
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA_fixed
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM_fixed
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_PLTE
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_IHDR
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
</UL>

<P><STRONG><a name="[2f7]"></a>png_chunk_error</STRONG> (Thumb, 152 bytes, Stack size 112 bytes, pngerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_check_chunk_name
</UL>

<P><STRONG><a name="[2f9]"></a>png_chunk_warning</STRONG> (Thumb, 152 bytes, Stack size 112 bytes, pngerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = png_chunk_warning &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
</UL>

<P><STRONG><a name="[301]"></a>png_set_error_fn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pngerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
</UL>

<P><STRONG><a name="[6d7]"></a>png_get_error_ptr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngerror.o(.text), UNUSED)

<P><STRONG><a name="[6d8]"></a>png_set_strip_error_numbers</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pngerror.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>png_get_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pngget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[21f]"></a>png_get_rowbytes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[6d9]"></a>png_get_rows</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6da]"></a>png_get_image_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6db]"></a>png_get_image_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6dc]"></a>png_get_bit_depth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6dd]"></a>png_get_color_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6de]"></a>png_get_filter_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6df]"></a>png_get_interlace_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6e0]"></a>png_get_compression_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6e1]"></a>png_get_x_pixels_per_meter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6e2]"></a>png_get_y_pixels_per_meter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6e3]"></a>png_get_pixels_per_meter</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>png_get_pixel_aspect_ratio</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pngget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[6e4]"></a>png_get_x_offset_microns</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6e5]"></a>png_get_y_offset_microns</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6e6]"></a>png_get_x_offset_pixels</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6e7]"></a>png_get_y_offset_pixels</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>png_get_channels</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>

<P><STRONG><a name="[6e8]"></a>png_get_signature</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>png_get_bKGD</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pngget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>

<P><STRONG><a name="[2fd]"></a>png_get_cHRM</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, pngget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[6e9]"></a>png_get_cHRM_fixed</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>png_get_gAMA</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pngget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_get_gAMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>

<P><STRONG><a name="[6ea]"></a>png_get_gAMA_fixed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6eb]"></a>png_get_sRGB</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6ec]"></a>png_get_iCCP</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6ed]"></a>png_get_sPLT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6ee]"></a>png_get_hIST</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>png_get_IHDR</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, pngget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = png_get_IHDR &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[6ef]"></a>png_get_oFFs</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f0]"></a>png_get_pCAL</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f1]"></a>png_get_sCAL</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f2]"></a>png_get_pHYs</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f3]"></a>png_get_PLTE</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>png_get_sBIT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[6f4]"></a>png_get_text</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f5]"></a>png_get_tIME</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f6]"></a>png_get_tRNS</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f7]"></a>png_get_unknown_chunks</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f8]"></a>png_get_rgb_to_gray_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6f9]"></a>png_get_user_chunk_ptr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6fa]"></a>png_get_compression_buffer_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6fb]"></a>png_get_asm_flags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6fc]"></a>png_get_asm_flagmask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6fd]"></a>png_get_mmx_flagmask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6fe]"></a>png_get_mmx_bitdepth_threshold</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[6ff]"></a>png_get_mmx_rowbytes_threshold</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[700]"></a>png_get_user_width_max</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[701]"></a>png_get_user_height_max</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngget.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>png_create_read_struct_2</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, pngread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_read_fn
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_mem_fn
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit_
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_error_fn
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_struct_2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct_2
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct
</UL>

<P><STRONG><a name="[303]"></a>png_create_read_struct</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pngread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
</UL>

<P><STRONG><a name="[304]"></a>png_read_init_3</STRONG> (Thumb, 244 bytes, Stack size 400 bytes, pngread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_read_fn
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit_
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_struct
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_2
</UL>

<P><STRONG><a name="[305]"></a>png_read_init_2</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, pngread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
</UL>

<P><STRONG><a name="[306]"></a>png_read_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pngread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
</UL>

<P><STRONG><a name="[22f]"></a>png_read_info</STRONG> (Thumb, 1250 bytes, Stack size 24 bytes, pngread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = png_read_info &rArr; png_handle_PLTE &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_sig_cmp
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tRNS
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tIME
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sRGB
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sBIT
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pHYs
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_oFFs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_hIST
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_bKGD
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_PLTE
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IHDR
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IEND
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_uint_31
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_read
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_as_unknown
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_reset_crc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[21d]"></a>png_read_update_info</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pngread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = png_read_update_info &rArr; png_read_start_row &rArr; png_init_read_transformations &rArr; png_build_gamma_table &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_transform_info
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_start_row
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>

<P><STRONG><a name="[320]"></a>png_start_read_image</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pngread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_start_row
</UL>

<P><STRONG><a name="[321]"></a>png_read_row</STRONG> (Thumb, 986 bytes, Stack size 24 bytes, pngread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = png_read_row &rArr; png_read_start_row &rArr; png_init_read_transformations &rArr; png_build_gamma_table &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_start_row
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_filter_row
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_memcpy_check
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_uint_31
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_intrapixel
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_interlace
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_read
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_combine_row
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_reset_crc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_image
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_rows
</UL>

<P><STRONG><a name="[32b]"></a>png_read_rows</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pngread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[222]"></a>png_read_image</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pngread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = png_read_image &rArr; png_read_row &rArr; png_read_start_row &rArr; png_init_read_transformations &rArr; png_build_gamma_table &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_interlace_handling
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>

<P><STRONG><a name="[223]"></a>png_read_end</STRONG> (Thumb, 936 bytes, Stack size 24 bytes, pngread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = png_read_end &rArr; png_handle_PLTE &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tRNS
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tIME
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sRGB
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sBIT
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pHYs
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_oFFs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_hIST
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_bKGD
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_PLTE
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IHDR
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IEND
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_uint_31
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_read
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_as_unknown
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_reset_crc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[32d]"></a>png_read_destroy</STRONG> (Thumb, 458 bytes, Stack size 408 bytes, pngread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = png_read_destroy &rArr; png_info_destroy &rArr; png_free_data &rArr;  png_free_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateEnd
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_destroy
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_zfree
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
</UL>

<P><STRONG><a name="[210]"></a>png_destroy_read_struct</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, pngread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = png_destroy_read_struct &rArr; png_destroy_struct_2 &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_destroy
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_struct_2
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSizeEx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSizeEx
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
</UL>

<P><STRONG><a name="[702]"></a>png_set_read_status_fn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngread.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>png_read_png</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, pngread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_strip_16
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_expand
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_valid
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_rowbytes
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_swap_alpha
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_swap
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_strip_alpha
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_shift
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_packswap
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_invert_mono
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_invert_alpha
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_interlace_handling
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_bgr
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_transform_info
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_start_row
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_sBIT
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
</UL>

<P><STRONG><a name="[307]"></a>png_read_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pngrio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = png_read_data &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tRNS
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tIME
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sRGB
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sBIT
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pHYs
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_oFFs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_hIST
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_bKGD
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_PLTE
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IHDR
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_read
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_error
</UL>

<P><STRONG><a name="[22c]"></a>png_set_read_fn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pngrio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = png_set_read_fn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageHeader
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
</UL>

<P><STRONG><a name="[339]"></a>png_set_crc_action</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, pngrtran.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>

<P><STRONG><a name="[21a]"></a>png_set_background</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = png_set_background &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>

<P><STRONG><a name="[215]"></a>png_set_strip_16</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pngrtran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[331]"></a>png_set_strip_alpha</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pngrtran.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[33b]"></a>png_set_dither</STRONG> (Thumb, 1682 bytes, Stack size 136 bytes, pngrtran.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[21c]"></a>png_set_gamma</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = png_set_gamma &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>

<P><STRONG><a name="[216]"></a>png_set_expand</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pngrtran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[703]"></a>png_set_palette_to_rgb</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pngrtran.o(.text), UNUSED)

<P><STRONG><a name="[704]"></a>png_set_expand_gray_1_2_4_to_8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pngrtran.o(.text), UNUSED)

<P><STRONG><a name="[705]"></a>png_set_gray_1_2_4_to_8</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pngrtran.o(.text), UNUSED)

<P><STRONG><a name="[706]"></a>png_set_tRNS_to_alpha</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pngrtran.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>png_set_gray_to_rgb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pngrtran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
</UL>

<P><STRONG><a name="[341]"></a>png_set_rgb_to_gray_fixed</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, pngrtran.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>

<P><STRONG><a name="[342]"></a>png_set_rgb_to_gray</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, pngrtran.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>

<P><STRONG><a name="[707]"></a>png_set_read_user_transform_fn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pngrtran.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>png_build_gamma_table</STRONG> (Thumb, 1892 bytes, Stack size 56 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = png_build_gamma_table &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
</UL>

<P><STRONG><a name="[34d]"></a>png_init_read_transformations</STRONG> (Thumb, 2576 bytes, Stack size 40 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = png_init_read_transformations &rArr; png_build_gamma_table &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_start_row
</UL>

<P><STRONG><a name="[31e]"></a>png_read_transform_info</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_read_transform_info
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_update_info
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[35e]"></a>png_do_read_swap_alpha</STRONG> (Thumb, 268 bytes, Stack size 12 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = png_do_read_swap_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[35d]"></a>png_do_read_invert_alpha</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_do_read_invert_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[35c]"></a>png_do_read_filler</STRONG> (Thumb, 742 bytes, Stack size 24 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = png_do_read_filler
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[353]"></a>png_do_gray_to_rgb</STRONG> (Thumb, 354 bytes, Stack size 12 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = png_do_gray_to_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[359]"></a>png_do_unpack</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_do_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[358]"></a>png_do_unshift</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = png_do_unshift
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[356]"></a>png_do_dither</STRONG> (Thumb, 314 bytes, Stack size 20 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = png_do_dither
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[708]"></a>png_do_chop</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, pngrtran.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>png_do_gamma</STRONG> (Thumb, 734 bytes, Stack size 36 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = png_do_gamma
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[354]"></a>png_do_background</STRONG> (Thumb, 3230 bytes, Stack size 64 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = png_do_background
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[352]"></a>png_do_rgb_to_gray</STRONG> (Thumb, 1104 bytes, Stack size 56 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = png_do_rgb_to_gray
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[34f]"></a>png_do_expand</STRONG> (Thumb, 1060 bytes, Stack size 40 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = png_do_expand &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[350]"></a>png_do_expand_palette</STRONG> (Thumb, 706 bytes, Stack size 36 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = png_do_expand_palette
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[329]"></a>png_do_read_transformations</STRONG> (Thumb, 902 bytes, Stack size 40 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = png_do_read_transformations &rArr; png_do_background
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_swap
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_strip_filler
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_packswap
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_invert
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_bgr
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_expand_palette
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_expand
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_rgb_to_gray
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_background
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_gamma
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_dither
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_unshift
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_unpack
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_gray_to_rgb
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_filler
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_invert_alpha
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_swap_alpha
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[709]"></a>png_build_grayscale_palette</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, pngrtran.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>png_do_read_intrapixel</STRONG> (Thumb, 348 bytes, Stack size 4 bytes, pngrtran.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = png_do_read_intrapixel
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[253]"></a>WM_BringToBottom</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, WM_BringToBottom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[268]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, WM_CriticalHandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[5b5]"></a>WM__RemoveCriticalHandle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, WM_CriticalHandle.o(.text), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[266]"></a>WM__GetClientRectEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, WM_GetClientRect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__GetClientRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
</UL>

<P><STRONG><a name="[362]"></a>WM_GetClientRectEx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, WM_GetClientRect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>

<P><STRONG><a name="[363]"></a>WM_GetClientRect</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, WM_GetClientRect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[235]"></a>WM_GetFirstChild</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, WM_GetFirstChild.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WM_GetFirstChild &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[270]"></a>WM_GetParent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, WM_GetParent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WM_GetParent &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>

<P><STRONG><a name="[364]"></a>WM_GetWindowRect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, WM_GetWindowRect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>

<P><STRONG><a name="[2d8]"></a>WM_GetWindowRectEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, WM_GetWindowRect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
</UL>

<P><STRONG><a name="[271]"></a>WM_IsWindow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, WM_IsWindow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WM_IsWindow &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
</UL>

<P><STRONG><a name="[24c]"></a>WM_NotifyParent</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, WM_NotifyParent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WM_NotifyParent &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[1a4]"></a>WM_OnKey</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, WM_OnKey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SendKeyMsg
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[273]"></a>WM_ResizeWindow</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, WM_ResizeWindow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[25c]"></a>WM_SendMessageNoPara</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, WM_SendMessageNoPara.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WM_SendMessageNoPara &rArr; WM__SendMessageNoPara
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[267]"></a>WM_SendToParent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, WM_SendToParent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
</UL>

<P><STRONG><a name="[248]"></a>WM__SendMessage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, WM__SendMessage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[368]"></a>LCD_SetLUTEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, GUICC_0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
</UL>

<P><STRONG><a name="[369]"></a>LCD_SetLUT</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, GUICC_0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
</UL>

<P><STRONG><a name="[77]"></a>LCD_Index2Color_888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, GUICC_888_Index2Color.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI__Alpha.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>GUIMONO_DispChar</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, GUI_CharM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> F6x8.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, GUI_CharM.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> F6x8.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_CharM.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> F6x8.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, GUI_CharM.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> F6x8.o(.constdata)
</UL>
<P><STRONG><a name="[70a]"></a>GUI__GetOrg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, GUI_GetOrg.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>GUI_GetOrg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, GUI_GetOrg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_GetOrg &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[2dd]"></a>GUI__AlphaSuppressMixing</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__AlphaSuppressMixing
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_SetAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[36e]"></a>GUI_SetAlpha</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDevice
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__SetAlphaCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.text)
</UL>
<P><STRONG><a name="[29d]"></a>GUI_SetLineStyle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, GUI_SetLineStyle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_SetLineStyle &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefault
</UL>

<P><STRONG><a name="[2bd]"></a>GUI_UC_GetCharSize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, GUI_UC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_UC_GetCharSize &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosChar
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosChar
</UL>

<P><STRONG><a name="[2bc]"></a>GUI_UC_GetCharCode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, GUI_UC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosChar
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorCharacter
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosChar
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetPresentationForm
</UL>

<P><STRONG><a name="[372]"></a>GUI_UC_Encode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, GUI_UC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_UC_Encode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_ConvertUC2UTF8
</UL>

<P><STRONG><a name="[70b]"></a>GUI_UC__CalcSizeOfChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUI_UC.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, GUI_UC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetWordWrap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCharWrap
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharWrap
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWordWrap
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosX
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
</UL>

<P><STRONG><a name="[28e]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, GUI_UC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
</UL>

<P><STRONG><a name="[2be]"></a>GUI_UC__NumBytes2NumChars</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, GUI_UC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumBytes2NumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosChar
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCursorPosChar
</UL>

<P><STRONG><a name="[2ba]"></a>GUI_UC_ConvertUC2UTF8</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, GUI_UC_ConvertUC2UTF8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_UC_ConvertUC2UTF8 &rArr; GUI_UC_Encode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_Log2Vis
</UL>

<P><STRONG><a name="[2b5]"></a>GUI__IsArabicCharacter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, GUI__Arabic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetWordWrap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCharWrap
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
</UL>

<P><STRONG><a name="[2b6]"></a>GUI__GetPresentationForm</STRONG> (Thumb, 602 bytes, Stack size 56 bytes, GUI__Arabic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_IsNSM
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetWordWrap
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCharWrap
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoJoiningAndDecoding
</UL>

<P><STRONG><a name="[2ce]"></a>GUI__memset16</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, GUI__memset16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[2c7]"></a>LCD_GetNumLayers</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, LCD_GetNumDisplays.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumLayers
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[29a]"></a>LCD_SelectLCD</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, LCD_SelectLCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SelectLCD
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[2d2]"></a>GUI_MEMDEV_Clear</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, GUIDEV_Clear.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_Clear &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[2d0]"></a>GUI_MEMDEV_ReduceYSize</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, GUIDEV_ReduceYSize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GUI_MEMDEV_ReduceYSize &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[2d1]"></a>GUI_MEMDEV_SetOrg</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, GUIDEV_SetOrg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GUI_MEMDEV_SetOrg &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[70c]"></a>get_crc_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, crc32.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>crc32</STRONG> (Thumb, 904 bytes, Stack size 16 bytes, crc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crc32 &rArr; crc32_big
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_big
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_reset_crc
</UL>

<P><STRONG><a name="[70d]"></a>crc32_combine</STRONG> (Thumb, 358 bytes, Stack size 280 bytes, crc32.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>inflateReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, inflate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_reset_zstream
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
</UL>

<P><STRONG><a name="[70e]"></a>inflatePrime</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, inflate.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>inflateInit2_</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, inflate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inflateInit2_
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit_
</UL>

<P><STRONG><a name="[302]"></a>inflateInit_</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inflate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inflateInit_ &rArr; inflateInit2_
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2_
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
</UL>

<P><STRONG><a name="[325]"></a>inflate</STRONG> (Thumb, 3942 bytes, Stack size 72 bytes, inflate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = inflate &rArr; inflate_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_table
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_fast
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatewindow
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
</UL>

<P><STRONG><a name="[32e]"></a>inflateEnd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, inflate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inflateEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_destroy
</UL>

<P><STRONG><a name="[379]"></a>inflateSetDictionary</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, inflate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatewindow
</UL>

<P><STRONG><a name="[70f]"></a>inflateGetHeader</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, inflate.o(.text), UNUSED)

<P><STRONG><a name="[710]"></a>inflateSync</STRONG> (Thumb, 348 bytes, Stack size 20 bytes, inflate.o(.text), UNUSED)

<P><STRONG><a name="[711]"></a>inflateSyncPoint</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, inflate.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>inflateCopy</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, inflate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2ec]"></a>png_create_struct_2</STRONG> (Thumb, 74 bytes, Stack size 952 bytes, pngmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 972<LI>Call Chain = png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_info_struct
</UL>

<P><STRONG><a name="[2eb]"></a>png_create_struct</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pngmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_init_3
</UL>

<P><STRONG><a name="[2f0]"></a>png_destroy_struct_2</STRONG> (Thumb, 46 bytes, Stack size 944 bytes, pngmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = png_destroy_struct_2 &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_info_struct
</UL>

<P><STRONG><a name="[2ea]"></a>png_destroy_struct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_init_3
</UL>

<P><STRONG><a name="[37d]"></a>png_malloc_default</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pngmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2e4]"></a>png_malloc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pngmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = png_malloc &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_dither
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_start_row
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_zalloc
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_compression_buffer_size
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_keep_unknown_chunks
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_tRNS
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_PLTE
</UL>

<P><STRONG><a name="[37e]"></a>png_free_default</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pngmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[2e5]"></a>png_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pngmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_dither
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_destroy
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_info_struct
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_destroy
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_zfree
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_compression_buffer_size
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_keep_unknown_chunks
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_unknown_chunks
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_iCCP
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
</UL>

<P><STRONG><a name="[33c]"></a>png_malloc_warn</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pngmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = png_malloc_warn &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_dither
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_unknown_chunks
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_pCAL
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_iCCP
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_hIST
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
</UL>

<P><STRONG><a name="[327]"></a>png_memcpy_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_memcpy_check &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[380]"></a>png_memset_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_memset_check &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_start_row
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
</UL>

<P><STRONG><a name="[300]"></a>png_set_mem_fn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pngmem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
</UL>

<P><STRONG><a name="[712]"></a>png_get_mem_ptr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngmem.o(.text), UNUSED)

<P><STRONG><a name="[713]"></a>png_get_uint_32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pngrutil.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>png_get_uint_31</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = png_get_uint_31 &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[714]"></a>png_get_int_32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pngrutil.o(.text), UNUSED)

<P><STRONG><a name="[715]"></a>png_get_uint_16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pngrutil.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>png_crc_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = png_crc_read &rArr; png_read_data &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[382]"></a>png_crc_error</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pngrutil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
</UL>

<P><STRONG><a name="[324]"></a>png_crc_finish</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_chunk_warning
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_chunk_error
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tRNS
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tIME
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sRGB
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sBIT
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pHYs
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_oFFs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_hIST
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_bKGD
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_PLTE
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IHDR
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IEND
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[383]"></a>png_decompress_chunk</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = png_decompress_chunk &rArr; inflate &rArr; inflate_table
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
</UL>

<P><STRONG><a name="[30a]"></a>png_handle_IHDR</STRONG> (Thumb, 654 bytes, Stack size 64 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = png_handle_IHDR &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_IHDR
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[30d]"></a>png_handle_PLTE</STRONG> (Thumb, 348 bytes, Stack size 808 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = png_handle_PLTE &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_PLTE
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[30b]"></a>png_handle_IEND</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = png_handle_IEND &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[310]"></a>png_handle_gAMA</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = png_handle_gAMA &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA_fixed
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[316]"></a>png_handle_sBIT</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = png_handle_sBIT &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sBIT
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[30f]"></a>png_handle_cHRM</STRONG> (Thumb, 2050 bytes, Stack size 152 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = png_handle_cHRM &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM_fixed
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[317]"></a>png_handle_sRGB</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = png_handle_sRGB &rArr; png_set_sRGB_gAMA_and_cHRM &rArr; png_set_cHRM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[318]"></a>png_handle_iCCP</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = png_handle_iCCP &rArr; png_decompress_chunk &rArr; inflate &rArr; inflate_table
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_iCCP
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[319]"></a>png_handle_sPLT</STRONG> (Thumb, 968 bytes, Stack size 40 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = png_handle_sPLT &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[31c]"></a>png_handle_tRNS</STRONG> (Thumb, 416 bytes, Stack size 288 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = png_handle_tRNS &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_tRNS
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[30e]"></a>png_handle_bKGD</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = png_handle_bKGD &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_bKGD
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[311]"></a>png_handle_hIST</STRONG> (Thumb, 804 bytes, Stack size 552 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = png_handle_hIST &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_hIST
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[315]"></a>png_handle_pHYs</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = png_handle_pHYs &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_pHYs
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[312]"></a>png_handle_oFFs</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = png_handle_oFFs &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_oFFs
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[313]"></a>png_handle_pCAL</STRONG> (Thumb, 482 bytes, Stack size 72 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = png_handle_pCAL &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_pCAL
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[314]"></a>png_handle_sCAL</STRONG> (Thumb, 824 bytes, Stack size 56 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = png_handle_sCAL &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sCAL
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[31b]"></a>png_handle_tIME</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = png_handle_tIME &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_tIME
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[31a]"></a>png_handle_tEXt</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = png_handle_tEXt &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[31d]"></a>png_handle_zTXt</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = png_handle_zTXt &rArr; png_decompress_chunk &rArr; inflate &rArr; inflate_table
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[39a]"></a>png_check_chunk_name</STRONG> (Thumb, 692 bytes, Stack size 0 bytes, pngrutil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_chunk_error
</UL>

<P><STRONG><a name="[30c]"></a>png_handle_unknown</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = png_handle_unknown &rArr; png_crc_finish &rArr; png_chunk_error &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_chunk_error
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_as_unknown
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_unknown_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
</UL>

<P><STRONG><a name="[322]"></a>png_combine_row</STRONG> (Thumb, 974 bytes, Stack size 40 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = png_combine_row &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[32a]"></a>png_do_read_interlace</STRONG> (Thumb, 976 bytes, Stack size 56 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = png_do_read_interlace &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[326]"></a>png_read_filter_row</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = png_read_filter_row
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[323]"></a>png_read_finish_row</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = png_read_finish_row &rArr; inflate &rArr; inflate_table
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_data
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_crc_finish
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_calculate_crc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_reset_crc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_memset_check
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
</UL>

<P><STRONG><a name="[31f]"></a>png_read_start_row</STRONG> (Thumb, 688 bytes, Stack size 8 bytes, pngrutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = png_read_start_row &rArr; png_init_read_transformations &rArr; png_build_gamma_table &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_memset_check
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_update_info
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_start_read_image
</UL>

<P><STRONG><a name="[336]"></a>png_set_bgr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[338]"></a>png_set_swap</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[716]"></a>png_set_packing</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>png_set_packswap</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[335]"></a>png_set_shift</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[32c]"></a>png_set_interlace_handling</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pngtrans.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_image
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[717]"></a>png_set_filler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)

<P><STRONG><a name="[718]"></a>png_set_add_alpha</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>png_set_swap_alpha</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[330]"></a>png_set_invert_alpha</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[333]"></a>png_set_invert_mono</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_png
</UL>

<P><STRONG><a name="[357]"></a>png_do_invert</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, pngtrans.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[35f]"></a>png_do_swap</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pngtrans.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[35b]"></a>png_do_packswap</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, pngtrans.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[351]"></a>png_do_strip_filler</STRONG> (Thumb, 614 bytes, Stack size 32 bytes, pngtrans.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = png_do_strip_filler &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[35a]"></a>png_do_bgr</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, pngtrans.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_transformations
</UL>

<P><STRONG><a name="[719]"></a>png_set_user_transform_info</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)

<P><STRONG><a name="[71a]"></a>png_get_user_transform_ptr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngtrans.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>WM_SetUserClipRect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, WM_SetUserClipRect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM_SetUserClipRect &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetClipRect
</UL>

<P><STRONG><a name="[360]"></a>WM__GetPrevSibling</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, WM__GetPrevSibling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[366]"></a>WM__SendMessageNoPara</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, WM__SendMessageNoPara.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__SendMessageNoPara
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
</UL>

<P><STRONG><a name="[365]"></a>WM__UpdateChildPositions</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, WM__UpdateChildPositions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + In Cycle
<LI>Call Chain = WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[367]"></a>GUI_CalcColorDist</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, GUI_CalcColorDist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[36d]"></a>LCD_AA_SetAndMask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, LCD_AA.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaSuppressMixing
</UL>

<P><STRONG><a name="[71b]"></a>LCD_AA_MixColors</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, LCD_AA.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>LCD_SetPixelAA</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, LCD_AA.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>

<P><STRONG><a name="[3a2]"></a>LCD_SetPixelAA_Xor</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, LCD_AA.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>

<P><STRONG><a name="[3a3]"></a>LCD_SetPixelAA_NoTrans</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, LCD_AA.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>

<P><STRONG><a name="[375]"></a>adler32</STRONG> (Thumb, 588 bytes, Stack size 12 bytes, adler32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adler32
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateSetDictionary
</UL>

<P><STRONG><a name="[71c]"></a>adler32_combine</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, adler32.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>inflate_fast</STRONG> (Thumb, 1268 bytes, Stack size 80 bytes, inffast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inflate_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
</UL>

<P><STRONG><a name="[376]"></a>inflate_table</STRONG> (Thumb, 944 bytes, Stack size 200 bytes, inftrees.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inflate_table
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
</UL>

<P><STRONG><a name="[390]"></a>png_set_bKGD</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pngset.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_bKGD
</UL>

<P><STRONG><a name="[38a]"></a>png_set_cHRM</STRONG> (Thumb, 622 bytes, Stack size 56 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = png_set_cHRM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
</UL>

<P><STRONG><a name="[38b]"></a>png_set_cHRM_fixed</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = png_set_cHRM_fixed &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
</UL>

<P><STRONG><a name="[387]"></a>png_set_gAMA</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = png_set_gAMA &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
</UL>

<P><STRONG><a name="[388]"></a>png_set_gAMA_fixed</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = png_set_gAMA_fixed &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
</UL>

<P><STRONG><a name="[391]"></a>png_set_hIST</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = png_set_hIST &rArr; png_malloc_warn &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_hIST
</UL>

<P><STRONG><a name="[384]"></a>png_set_IHDR</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = png_set_IHDR &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_IHDR
</UL>

<P><STRONG><a name="[393]"></a>png_set_oFFs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pngset.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_oFFs
</UL>

<P><STRONG><a name="[394]"></a>png_set_pCAL</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = png_set_pCAL &rArr; png_malloc_warn &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pCAL
</UL>

<P><STRONG><a name="[396]"></a>png_set_sCAL</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_set_sCAL
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
</UL>

<P><STRONG><a name="[392]"></a>png_set_pHYs</STRONG> (Thumb, 734 bytes, Stack size 0 bytes, pngset.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_pHYs
</UL>

<P><STRONG><a name="[385]"></a>png_set_PLTE</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = png_set_PLTE &rArr; png_malloc &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_PLTE
</UL>

<P><STRONG><a name="[389]"></a>png_set_sBIT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = png_set_sBIT
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sBIT
</UL>

<P><STRONG><a name="[71d]"></a>png_set_sRGB</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>png_set_sRGB_gAMA_and_cHRM</STRONG> (Thumb, 304 bytes, Stack size 96 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = png_set_sRGB_gAMA_and_cHRM &rArr; png_set_cHRM &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM_fixed
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sRGB
</UL>

<P><STRONG><a name="[38d]"></a>png_set_iCCP</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = png_set_iCCP &rArr; png_malloc_warn &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_iCCP
</UL>

<P><STRONG><a name="[399]"></a>png_set_text_2</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = png_set_text_2 &rArr; png_malloc_warn &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_zTXt
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text
</UL>

<P><STRONG><a name="[3a5]"></a>png_set_text</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pngset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
</UL>

<P><STRONG><a name="[397]"></a>png_set_tIME</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, pngset.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tIME
</UL>

<P><STRONG><a name="[38f]"></a>png_set_tRNS</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = png_set_tRNS &rArr; png_malloc &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tRNS
</UL>

<P><STRONG><a name="[38e]"></a>png_set_sPLT</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = png_set_sPLT &rArr; png_malloc_warn &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sPLT
</UL>

<P><STRONG><a name="[39c]"></a>png_set_unknown_chunks</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, pngset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = png_set_unknown_chunks &rArr; png_malloc_warn &rArr; png_error
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_warning
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
</UL>

<P><STRONG><a name="[71e]"></a>png_set_unknown_chunk_location</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[71f]"></a>png_permit_empty_plte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[720]"></a>png_permit_mng_features</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>png_set_keep_unknown_chunks</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, pngset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[721]"></a>png_set_read_user_chunk_fn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>png_set_rows</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pngset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_data
</UL>

<P><STRONG><a name="[3a8]"></a>png_set_compression_buffer_size</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pngset.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
</UL>

<P><STRONG><a name="[722]"></a>png_set_invalid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[723]"></a>png_set_asm_flags</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[724]"></a>png_set_mmx_thresholds</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[725]"></a>png_set_user_limits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngset.o(.text), UNUSED)

<P><STRONG><a name="[726]"></a>zlibVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zutil.o(.text), UNUSED)

<P><STRONG><a name="[727]"></a>zlibCompileFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zutil.o(.text), UNUSED)

<P><STRONG><a name="[728]"></a>zError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, zutil.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>zcalloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = zcalloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflate.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>zcfree</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, zutil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = zcfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflate.o(.text)
</UL>
<P><STRONG><a name="[3a9]"></a>WM__MoveWindow</STRONG> (Thumb, 256 bytes, Stack size 128 bytes, WM_Move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveTo
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveTo
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>

<P><STRONG><a name="[3ab]"></a>WM__MoveTo</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, WM_Move.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[39f]"></a>WM_MoveWindow</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, WM_Move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[3ac]"></a>WM_MoveTo</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, WM_Move.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[39e]"></a>WM__GetFirstSibling</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, WM__GetFirstSibling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>

<P><STRONG><a name="[3a1]"></a>LCD_GetPixelColor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, LCD_GetPixelColor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA_Xor
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA
</UL>

<P><STRONG><a name="[3ad]"></a>LCD_GetPixelIndex</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, LCD_GetP.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>

<P><STRONG><a name="[3ae]"></a>GUI_GetPixelIndex</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, LCD_GetP.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[3af]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4b6]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_Serial_DbgFRMWRK
</UL>

<P><STRONG><a name="[540]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[729]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[72a]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_LoadRes
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StoreSettings
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetUserDataEx
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetUserDataEx
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG__GetData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_read_interlace
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_combine_row
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_keep_unknown_chunks
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_unknown_chunks
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_tRNS
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_pCAL
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_iCCP
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_PLTE
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_decompress_chunk
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateCopy
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateSetDictionary
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updatewindow
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettings_StoreDefaults
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_destroy
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_unknown_chunks
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateCopy
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_strip_filler
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_do_expand
</UL>

<P><STRONG><a name="[58f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[37f]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_memcpy_check
</UL>

<P><STRONG><a name="[72b]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_dither
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_AddHLine
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[72c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_dither
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct_2
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_PLTE
</UL>

<P><STRONG><a name="[2b9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffCalc_init
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_Log2Vis
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetLogChar
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosChar
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorCharacter
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCharDir
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_info_struct
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_destroy
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_init_3
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_info_struct
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_destroy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_info_init_3
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Clear
</UL>

<P><STRONG><a name="[72e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_memset_check
</UL>

<P><STRONG><a name="[2f8]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_LoadRes
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_chunk_warning
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_chunk_error
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_unknown_chunks
</UL>

<P><STRONG><a name="[398]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_LoadRes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_tEXt
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_text_2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_pCAL
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_iCCP
</UL>

<P><STRONG><a name="[2e1]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_sig_cmp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_end
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_finish_row
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_row
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_as_unknown
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_check_sig
</UL>

<P><STRONG><a name="[39b]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_unknown
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sPLT
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_iCCP
</UL>

<P><STRONG><a name="[438]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
</UL>

<P><STRONG><a name="[3b2]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[346]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
</UL>

<P><STRONG><a name="[2fc]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_pixel_aspect_ratio
</UL>

<P><STRONG><a name="[343]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_rgb_to_gray
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[33f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gamma
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[3b7]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[33e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_expo_gauges
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gamma
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_rgb_to_gray
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[347]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_expo_gauges
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA_fixed
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM_fixed
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[34c]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[72f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
</UL>

<P><STRONG><a name="[2fb]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_pixel_aspect_ratio
</UL>

<P><STRONG><a name="[348]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_expo_gauges
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA_fixed
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM_fixed
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[34b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[344]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_get_percentage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_rgb_to_gray
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[34a]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_expo_gauges
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_get_percentage
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
</UL>

<P><STRONG><a name="[2fe]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_gAMA
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_rgb_to_gray
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_gAMA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_cHRM
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_cHRM
</UL>

<P><STRONG><a name="[3a4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA
</UL>

<P><STRONG><a name="[34e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
</UL>

<P><STRONG><a name="[340]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gamma
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[33a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gamma
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_background
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_rgb_to_gray
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sRGB_gAMA_and_cHRM
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA_fixed
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_gAMA
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM_fixed
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_cHRM
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2ff]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
</UL>

<P><STRONG><a name="[2f6]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_error
</UL>

<P><STRONG><a name="[730]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[731]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[732]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[733]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[734]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[3b8]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[3b6]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3b5]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[3bc]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[3bd]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[120]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[735]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3ba]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[3c2]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7f]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[3bf]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[3c1]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[736]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[737]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>ADC_BurstCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc177x_8x_adc.o(i.ADC_BurstCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCStop
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCStart
</UL>

<P><STRONG><a name="[410]"></a>ADC_ChannelCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lpc177x_8x_adc.o(i.ADC_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCInit
</UL>

<P><STRONG><a name="[3c5]"></a>ADC_ChannelGetData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_adc.o(i.ADC_ChannelGetData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[3c4]"></a>ADC_ChannelGetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc177x_8x_adc.o(i.ADC_ChannelGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ChannelGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>ADC_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bsp.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; ADC_ChannelGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetStatus
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetData
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3c7]"></a>ADC_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lpc177x_8x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCInit
</UL>

<P><STRONG><a name="[40f]"></a>ADC_IntConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lpc177x_8x_adc.o(i.ADC_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCInit
</UL>

<P><STRONG><a name="[3ca]"></a>APLAY_DAC_DMA_Handler</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, aplay.o(i.APLAY_DAC_DMA_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APLAY_DAC_DMA_Handler &rArr; GPDMA_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Setup
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_IntGetStatus
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ClearIntPending
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelCmd
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[3d0]"></a>APP_GetValue</STRONG> (Thumb, 22 bytes, Stack size 56 bytes, appsettings.o(i.APP_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_bcklight_reduce_state
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_BSP_processKS
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandShake_on_msg_ready
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_comm_timeout
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_comm_timeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_comm_timeout
</UL>

<P><STRONG><a name="[3d2]"></a>APP_SetVal</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, appsettings.o(i.APP_SetVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = APP_SetVal &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StoreSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandShake_on_msg_ready
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
</UL>

<P><STRONG><a name="[3d3]"></a>APP_StoreSettings</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, appsettings.o(i.APP_StoreSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_StoreSettings &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetVal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[3d4]"></a>AT_disable_PWM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, atmenu.o(i.AT_disable_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT_disable_PWM &rArr; BSP_PWMSet &rArr; PWM_MatchUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
</UL>

<P><STRONG><a name="[3d6]"></a>AT_enable_PWM</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atmenu.o(i.AT_enable_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AT_enable_PWM &rArr; BSP_PWMSet &rArr; PWM_MatchUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_set_pwm_freq_hz
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
</UL>

<P><STRONG><a name="[3d8]"></a>AT_set_voltage_p2p</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, atmenu.o(i.AT_set_voltage_p2p))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AT_set_voltage_p2p &rArr; App_waitMS &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_waitMS
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
</UL>

<P><STRONG><a name="[3f3]"></a>AZP_AllMetal</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, azpallmetal.o(i.AZP_AllMetal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548<LI>Call Chain = AZP_AllMetal &rArr; SB_init &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Mem_Data
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_bcklight_reduce_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_delete
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffCalc_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MULTIBUF_Enable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
</UL>

<P><STRONG><a name="[3fd]"></a>AZP_Disc</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, azpdisc.o(i.AZP_Disc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548<LI>Call Chain = AZP_Disc &rArr; SB_init &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Mem_Data
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_bcklight_reduce_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_delete
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffCalc_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MULTIBUF_Enable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
</UL>

<P><STRONG><a name="[3fe]"></a>AZP_Fast</STRONG> (Thumb, 594 bytes, Stack size 40 bytes, azpfast.o(i.AZP_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548<LI>Call Chain = AZP_Fast &rArr; SB_init &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Mem_Data
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_bcklight_reduce_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_delete
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetVal
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffCalc_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MULTIBUF_Enable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
</UL>

<P><STRONG><a name="[3ff]"></a>AZP_Loading</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, azploading.o(i.AZP_Loading))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492<LI>Call Chain = AZP_Loading &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Mem_Data
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_waitMS
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandShake_on_msg_ready
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MULTIBUF_Enable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
</UL>

<P><STRONG><a name="[402]"></a>AZP_Menu</STRONG> (Thumb, 716 bytes, Stack size 40 bytes, azpmenu.o(i.AZP_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548<LI>Call Chain = AZP_Menu &rArr; SB_init &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Mem_Data
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_delete
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearKeyBuffer
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_2_mangbstep
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MULTIBUF_Enable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
</UL>

<P><STRONG><a name="[404]"></a>Analog_Deinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, analog.o(i.Analog_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Analog_Deinit &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
</UL>

<P><STRONG><a name="[405]"></a>Analog_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, analog.o(i.Analog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Analog_init &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
</UL>

<P><STRONG><a name="[406]"></a>AppSettings_StoreDefaults</STRONG> (Thumb, 28 bytes, Stack size 56 bytes, appsettings.o(i.AppSettings_StoreDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = AppSettings_StoreDefaults &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
</UL>

<P><STRONG><a name="[3d1]"></a>App_ReloadSettings</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, appsettings.o(i.App_ReloadSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_crc16
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettings_StoreDefaults
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSettings_StoreDefaults
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetVal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[408]"></a>App_SetHWTypeStates</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, appcommon.o(i.App_SetHWTypeStates))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = App_SetHWTypeStates &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_clock_generation
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_clock_generation
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock_generation
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Deinit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_set_voltage_p2p
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_enable_PWM
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_disable_PWM
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_waitMS
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[3dd]"></a>App_waitMS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, appcommon.o(i.App_waitMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = App_waitMS &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_set_voltage_p2p
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[41e]"></a>BAT_RAWADC_2_PACK_MV</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, battery.o(i.BAT_RAWADC_2_PACK_MV))
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_get_percentage
</UL>

<P><STRONG><a name="[40d]"></a>BSP_ADCInit</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, bsp.o(i.BSP_ADCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_ADCInit &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetAnalogPinMode
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
</UL>

<P><STRONG><a name="[411]"></a>BSP_ADCStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp.o(i.BSP_ADCStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ADCStart
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BurstCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
</UL>

<P><STRONG><a name="[3c6]"></a>BSP_ADCStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(i.BSP_ADCStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ADCStop
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BurstCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_delete
</UL>

<P><STRONG><a name="[436]"></a>BSP_DelayMS</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bsp.o(i.BSP_DelayMS), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
</UL>

<P><STRONG><a name="[473]"></a>BSP_GET_RAW_ADC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(i.BSP_GET_RAW_ADC))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
</UL>

<P><STRONG><a name="[413]"></a>BSP_GPIOInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp.o(i.BSP_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_GPIOInit &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[415]"></a>BSP_Init</STRONG> (Thumb, 36 bytes, Stack size 88 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BSP_Init &rArr; __BSP_PWMInit &rArr; PWM_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TPs
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFilterCFs
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIOInit
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[419]"></a>BSP_Init_IRQ_Priorities</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, bsp.o(i.BSP_Init_IRQ_Priorities))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_Init_IRQ_Priorities &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[3d5]"></a>BSP_PWMSet</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bsp.o(i.BSP_PWMSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_PWMSet &rArr; PWM_MatchUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_MatchUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_enable_PWM
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_disable_PWM
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_bcklight_reduce_state
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_BSP_processKS
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[41d]"></a>BSP_get_percentage</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, battery.o(i.BSP_get_percentage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_get_percentage &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_RAWADC_2_PACK_MV
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
</UL>

<P><STRONG><a name="[3d7]"></a>BSP_set_pwm_freq_hz</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bsp.o(i.BSP_set_pwm_freq_hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_set_pwm_freq_hz &rArr; PWM_MatchUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_MatchUpdate
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_enable_PWM
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
</UL>

<P><STRONG><a name="[3c8]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_ConfigPPWR))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Config
</UL>

<P><STRONG><a name="[3c9]"></a>CLKPWR_GetCLK</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_GetCLK))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock_generation
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_set_pwm_freq_hz
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Clk_gen_Msg
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
</UL>

<P><STRONG><a name="[4f2]"></a>CLKPWR_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_Sleep))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41f]"></a>CommInit</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, communication.o(i.CommInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CommInit &rArr; UartInt_init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[422]"></a>DAC_ConfigDAConverterControl</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lpc177x_8x_dac.o(i.DAC_ConfigDAConverterControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_ConfigDAConverterControl
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
</UL>

<P><STRONG><a name="[3f2]"></a>DAC_DMA_Update_Freq</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dac.o(i.DAC_DMA_Update_Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DAC_DMA_Update_Freq &rArr; DAC_SetDMATimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetDMATimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_SetFreq_RTID
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_SetFreq_FTID
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[425]"></a>DAC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lpc177x_8x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAC_Init &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetAnalogPinMode
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_DacEnable
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetBias
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
</UL>

<P><STRONG><a name="[427]"></a>DAC_SetBias</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lpc177x_8x_dac.o(i.DAC_SetBias))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_SetBias
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[424]"></a>DAC_SetDMATimeOut</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_dac.o(i.DAC_SetDMATimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_SetDMATimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
</UL>

<P><STRONG><a name="[34]"></a>DMA_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, appcommon.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA_IRQHandler &rArr; WAVE_DAC_DMA_Handler &rArr; DAC_DMA_Update_Freq &rArr; DAC_SetDMATimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DMA_IRQHandler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APLAY_DAC_DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3f6]"></a>DiffCalc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, diffcalculator.o(i.DiffCalc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiffCalc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[42d]"></a>GLCD_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, glcd.o(i.GLCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Ctrl
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
</UL>

<P><STRONG><a name="[3ce]"></a>GPDMA_ChannelCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc177x_8x_gpdma.o(i.GPDMA_ChannelCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_start
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APLAY_DAC_DMA_Handler
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
</UL>

<P><STRONG><a name="[3cc]"></a>GPDMA_ClearIntPending</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc177x_8x_gpdma.o(i.GPDMA_ClearIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DMA_IRQHandler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APLAY_DAC_DMA_Handler
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
</UL>

<P><STRONG><a name="[42f]"></a>GPDMA_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lpc177x_8x_gpdma.o(i.GPDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
</UL>

<P><STRONG><a name="[3cb]"></a>GPDMA_IntGetStatus</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, lpc177x_8x_gpdma.o(i.GPDMA_IntGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DMA_IRQHandler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APLAY_DAC_DMA_Handler
</UL>

<P><STRONG><a name="[3cd]"></a>GPDMA_Setup</STRONG> (Thumb, 594 bytes, Stack size 16 bytes, lpc177x_8x_gpdma.o(i.GPDMA_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPDMA_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APLAY_DAC_DMA_Handler
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
</UL>

<P><STRONG><a name="[3da]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_ClearValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Deinit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_set_voltage_p2p
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIOInit
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Config
</UL>

<P><STRONG><a name="[414]"></a>GPIO_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc177x_8x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIOInit
</UL>

<P><STRONG><a name="[431]"></a>GPIO_OutputValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_OutputValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_OutputValue &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TPs
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
</UL>

<P><STRONG><a name="[432]"></a>GPIO_ReadValue</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_ReadValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadValue
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_BSP_processKS
</UL>

<P><STRONG><a name="[3db]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Deinit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_set_voltage_p2p
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TPs
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_GpioInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIOInit
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Config
</UL>

<P><STRONG><a name="[3dc]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_set_voltage_p2p
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Config
</UL>

<P><STRONG><a name="[168]"></a>GUI_X_Config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, guiconf.o(i.GUI_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefaultFont
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_SetAvBlockSize
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[1b2]"></a>GUI_X_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gui_x.o(i.GUI_X_Delay), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[b]"></a>GUI_X_ExecIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_ExecIdle))
<BR>[Address Reference Count : 1]<UL><LI> GUI_WaitEvent.o(.data)
</UL>
<P><STRONG><a name="[2a0]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_GetTaskId))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[1af]"></a>GUI_X_GetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_bcklight_reduce_state
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_BSP_processKS
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_comm_timeout
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_comm_timeout
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_comm_timeout
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>

<P><STRONG><a name="[16b]"></a>GUI_X_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_Init))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[2a4]"></a>GUI_X_InitOS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_InitOS))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[2a1]"></a>GUI_X_Lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[29f]"></a>GUI_X_Unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x.o(i.GUI_X_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_GetpContext
</UL>

<P><STRONG><a name="[3ec]"></a>GetString</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, appsettings.o(i.GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GetString &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBk_Desktop
</UL>

<P><STRONG><a name="[4de]"></a>GetString2Lang</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, appsettings.o(i.GetString2Lang))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_lang
</UL>

<P><STRONG><a name="[416]"></a>InitFilterCFs</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, corefirfilter.o(i.InitFilterCFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitFilterCFs
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[400]"></a>InitGroupRes</STRONG> (Thumb, 1340 bytes, Stack size 112 bytes, runtimeloader.o(i.InitGroupRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1460<LI>Call Chain = InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF_CreateFont
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_Draw
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_PunchOutDevice
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_Draw
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRes
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[439]"></a>KS_GpioInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bsp.o(i.KS_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KS_GpioInit &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_init
</UL>

<P><STRONG><a name="[43a]"></a>KS_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp.o(i.KS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = KS_init &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_GpioInit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>LCD_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcdconf_multiplebuffer.o(i.LCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_Confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>LCD_X_Config</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lcdconf_multiplebuffer.o(i.LCD_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_Config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[1ee]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lcdconf_multiplebuffer.o(i.LCD_X_DisplayDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_X_DisplayDriver &rArr; _InitController &rArr; GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDisplayOrigin
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitController
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChroma
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChromaMode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlphaMode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Off
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_On
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[437]"></a>LoadRes</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, runtimeloader.o(i.LoadRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = LoadRes &rArr; sdmmc_LoadRes &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_LoadRes
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
</UL>

<P><STRONG><a name="[440]"></a>MCI_Acmd_SendBusWidth</STRONG> (Thumb, 116 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Acmd_SendBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBusWidth
</UL>

<P><STRONG><a name="[444]"></a>MCI_Acmd_SendOpCond</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, lpc177x_8x_mci.o(i.MCI_Acmd_SendOpCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[446]"></a>MCI_CardInit</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, lpc177x_8x_mci.o(i.MCI_CardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MCI_CardInit &rArr; MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendOpCond
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendIfCond
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardReset
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
</UL>

<P><STRONG><a name="[447]"></a>MCI_CardReset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_CardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCI_CardReset &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[441]"></a>MCI_CheckStatus</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[458]"></a>MCI_CmdProcess</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_CmdProcess))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[443]"></a>MCI_CmdResp</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_CmdResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCmd
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardStatus
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCID
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendOpCond
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendIfCond
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[44d]"></a>MCI_Cmd_ReadBlock</STRONG> (Thumb, 158 bytes, Stack size 68 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
</UL>

<P><STRONG><a name="[44e]"></a>MCI_Cmd_SelectCard</STRONG> (Thumb, 206 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MCI_Cmd_SelectCard &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[442]"></a>MCI_Cmd_SendACMD</STRONG> (Thumb, 122 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendACMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[448]"></a>MCI_Cmd_SendIfCond</STRONG> (Thumb, 126 bytes, Stack size 68 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendIfCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MCI_Cmd_SendIfCond &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[449]"></a>MCI_Cmd_SendOpCond</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendOpCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCI_Cmd_SendOpCond &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[44f]"></a>MCI_Cmd_StopTransmission</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_StopTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCI_Cmd_StopTransmission &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[450]"></a>MCI_Cmd_WriteBlock</STRONG> (Thumb, 158 bytes, Stack size 68 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
</UL>

<P><STRONG><a name="[451]"></a>MCI_DATA_END_InterruptService</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, lpc177x_8x_mci.o(i.MCI_DATA_END_InterruptService))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MCI_DATA_END_InterruptService
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_TXDisable
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_RXDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[429]"></a>MCI_DMA_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, lpc177x_8x_mci.o(i.MCI_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_IntGetStatus
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ClearIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[456]"></a>MCI_DataErrorProcess</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_DataErrorProcess))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[457]"></a>MCI_FIFOInterruptService</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_FIFOInterruptService))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[454]"></a>MCI_GetCID</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_GetCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCI_GetCID &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[455]"></a>MCI_GetCSD</STRONG> (Thumb, 136 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_GetCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MCI_GetCSD &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[4f4]"></a>MCI_GetCardAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetCardAddress))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[44b]"></a>MCI_GetCardStatus</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, lpc177x_8x_mci.o(i.MCI_GetCardStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[4f3]"></a>MCI_GetCardType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetCardType))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[44c]"></a>MCI_GetCmdResp</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, lpc177x_8x_mci.o(i.MCI_GetCmdResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCI_GetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>

<P><STRONG><a name="[4da]"></a>MCI_GetDataXferEndState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetDataXferEndState))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[4db]"></a>MCI_GetXferErrState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetXferErrState))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[37]"></a>MCI_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, lpc177x_8x_mci.o(i.MCI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_IRQHandler &rArr; MCI_DATA_END_InterruptService
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FIFOInterruptService
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DataErrorProcess
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[459]"></a>MCI_Init</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, lpc177x_8x_mci.o(i.MCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MCI_Init &rArr; MCI_CardInit &rArr; MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[453]"></a>MCI_RXDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_RXDisable))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
</UL>

<P><STRONG><a name="[45d]"></a>MCI_RXEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_RXEnable))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
</UL>

<P><STRONG><a name="[45c]"></a>MCI_ReadBlock</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MCI_ReadBlock &rArr; MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_RXEnable
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[44a]"></a>MCI_SendCmd</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardReset
</UL>

<P><STRONG><a name="[45f]"></a>MCI_SetBlockLen</STRONG> (Thumb, 110 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_SetBlockLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MCI_SetBlockLen &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[460]"></a>MCI_SetBusWidth</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lpc177x_8x_mci.o(i.MCI_SetBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[461]"></a>MCI_SetCardAddress</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lpc177x_8x_mci.o(i.MCI_SetCardAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCI_SetCardAddress &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[445]"></a>MCI_SetOutputMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_SetOutputMode))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
</UL>

<P><STRONG><a name="[45a]"></a>MCI_Set_MCIClock</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_Set_MCIClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCI_Set_MCIClock
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[45e]"></a>MCI_SettingDma</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_SettingDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MCI_SettingDma &rArr; GPDMA_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Setup
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelCmd
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
</UL>

<P><STRONG><a name="[452]"></a>MCI_TXDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_TXDisable))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
</UL>

<P><STRONG><a name="[463]"></a>MCI_TXEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_TXEnable))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
</UL>

<P><STRONG><a name="[462]"></a>MCI_WriteBlock</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_TXEnable
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[3d9]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(i.PINSEL_ConfigPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock_generation
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_init
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Deinit
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_set_voltage_p2p
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TPs
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_32M_16BIT_Init
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_GpioInit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIOInit
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCInit
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortPin_Init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Config
</UL>

<P><STRONG><a name="[426]"></a>PINSEL_DacEnable</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(i.PINSEL_DacEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINSEL_DacEnable &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[464]"></a>PINSEL_GetPinType</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, lpc177x_8x_pinsel.o(i.PINSEL_GetPinType))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetAnalogPinMode
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_DacEnable
</UL>

<P><STRONG><a name="[40e]"></a>PINSEL_SetAnalogPinMode</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(i.PINSEL_SetAnalogPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINSEL_SetAnalogPinMode &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCInit
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>

<P><STRONG><a name="[465]"></a>PIN_GetPointer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lpc177x_8x_pinsel.o(i.PIN_GetPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetAnalogPinMode
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_DacEnable
</UL>

<P><STRONG><a name="[466]"></a>PWM_ChannelCmd</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lpc177x_8x_pwm.o(i.PWM_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
</UL>

<P><STRONG><a name="[468]"></a>PWM_ChannelConfig</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lpc177x_8x_pwm.o(i.PWM_ChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_ChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
</UL>

<P><STRONG><a name="[469]"></a>PWM_Cmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(i.PWM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
</UL>

<P><STRONG><a name="[46a]"></a>PWM_ConfigMatch</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(i.PWM_ConfigMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
</UL>

<P><STRONG><a name="[46b]"></a>PWM_CounterCmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(i.PWM_CounterCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_CounterCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
</UL>

<P><STRONG><a name="[46c]"></a>PWM_Init</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, lpc177x_8x_pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PWM_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
</UL>

<P><STRONG><a name="[41c]"></a>PWM_MatchUpdate</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lpc177x_8x_pwm.o(i.PWM_MatchUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_MatchUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_set_pwm_freq_hz
</UL>

<P><STRONG><a name="[46d]"></a>PWM_ResetCounter</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lpc177x_8x_pwm.o(i.PWM_ResetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_ResetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BSP_PWMInit
</UL>

<P><STRONG><a name="[3fb]"></a>Print_Mem_Data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, appcommon.o(i.Print_Mem_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print_Mem_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetNumFreeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[3ee]"></a>Process_Clk_gen_Msg</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, analog.o(i.Process_Clk_gen_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Process_Clk_gen_Msg &rArr; on_clock_cmd &rArr; UARTSend &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_clock_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandShake_on_msg_ready
</UL>

<P><STRONG><a name="[50a]"></a>RTC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(i.RTC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_ResloadInit
</UL>

<P><STRONG><a name="[4ec]"></a>RTC_GetFullTime</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(i.RTC_GetFullTime))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[470]"></a>RTC_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc177x_8x_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_ResloadInit
</UL>

<P><STRONG><a name="[509]"></a>RTC_SetFullTime</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lpc177x_8x_rtc.o(i.RTC_SetFullTime))
<BR><BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_ResloadInit
</UL>

<P><STRONG><a name="[471]"></a>ResLoadInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, runtimeloader.o(i.ResLoadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ResLoadInit &rArr; sdmmc_ResloadInit &rArr; RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_ResloadInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3fc]"></a>SB_delete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, statusbar.o(i.SB_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SB_delete &rArr; WM_DeleteWindow &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCStop
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[3f5]"></a>SB_init</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, statusbar.o(i.SB_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508<LI>Call Chain = SB_init &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_get_percentage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GET_RAW_ADC
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCStart
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[3e7]"></a>SB_setget_component</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, statusbar.o(i.SB_setget_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = SB_setget_component &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StoreSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[474]"></a>SDRAM_32M_16BIT_Init</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, sdram_k4s561632c_32m_16bit.o(i.SDRAM_32M_16BIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDRAM_32M_16BIT_Init &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[475]"></a>SerialInit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, serial.o(i.SerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SerialInit &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e3]"></a>StopCommTimeout</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uartint.o(i.StopCommTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = StopCommTimeout &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandShake_on_msg_ready
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
</UL>

<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[47a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 696 bytes, Stack size 12 bytes, system_lpc177x_8x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 210 bytes, Stack size 4 bytes, system_lpc177x_8x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dac.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; GPDMA_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Setup
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[47c]"></a>TIM_ClearIntPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(i.TIM_ClearIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_clock_generation
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[4a9]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_clock_generation
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_clock_generation
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock_generation
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Stop
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Start
</UL>

<P><STRONG><a name="[4a3]"></a>TIM_ConfigMatch</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lpc177x_8x_timer.o(i.TIM_ConfigMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_clock_generation
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_clock_generation
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock_generation
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Modulator_Update_Freq
</UL>

<P><STRONG><a name="[47b]"></a>TIM_GetIntStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc177x_8x_timer.o(i.TIM_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[47e]"></a>TIM_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lpc177x_8x_timer.o(i.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converPtrToTimeNum
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clock_generation
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Tmr_Init
</UL>

<P><STRONG><a name="[50d]"></a>TIM_ResetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(i.TIM_ResetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_clock_generation
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_clock_generation
</UL>

<P><STRONG><a name="[50c]"></a>TIM_UpdateMatchValue</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(i.TIM_UpdateMatchValue))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mat_value
</UL>

<P><STRONG><a name="[20]"></a>UART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uartint.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART1_IRQHandler &rArr; UART_IntReceive &rArr; UARTGetFromBuffer &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntReceive
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntErr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>UARTGetChar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTGetChar &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a9]"></a>UARTGetCharInNonBlock</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTGetCharInNonBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTGetCharInNonBlock &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_Serial_DbgFRMWRK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a8]"></a>UARTGetValue</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, debug_frmwrk.o(i.UARTGetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UARTGetValue &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[9d]"></a>UARTPutChar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex_
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32_
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16_
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec32
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec16
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutDec
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a4]"></a>UARTPutDec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UARTPutDec &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a5]"></a>UARTPutDec16</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, debug_frmwrk.o(i.UARTPutDec16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTPutDec16 &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a6]"></a>UARTPutDec32</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, debug_frmwrk.o(i.UARTPutDec32))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UARTPutDec32 &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[9e]"></a>UARTPutHex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTPutHex &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[9f]"></a>UARTPutHex16</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex16))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTPutHex16 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a2]"></a>UARTPutHex16_</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex16_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UARTPutHex16_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a0]"></a>UARTPutHex32</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex32))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UARTPutHex32 &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a3]"></a>UARTPutHex32_</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex32_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UARTPutHex32_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[a1]"></a>UARTPutHex_</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_frmwrk.o(i.UARTPutHex_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UARTPutHex_ &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[9b]"></a>UARTPuts</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts_
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex16
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutHex
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[9c]"></a>UARTPuts_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, debug_frmwrk.o(i.UARTPuts_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTPuts_ &rArr; UARTPuts &rArr; UARTPutChar &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPuts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_frmwrk.o(i.debug_frmwrk_init)
</UL>
<P><STRONG><a name="[3e9]"></a>UARTSend</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, uartint.o(i.UARTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = UARTSend &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_clock_cmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandShake_on_msg_ready
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[491]"></a>UART_CheckBusy</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_CheckBusy))
<BR><BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
</UL>

<P><STRONG><a name="[496]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>

<P><STRONG><a name="[498]"></a>UART_FIFOConfig</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lpc177x_8x_uart.o(i.UART_FIFOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_FIFOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>

<P><STRONG><a name="[497]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_FIFOConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>

<P><STRONG><a name="[481]"></a>UART_GetIntId</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_GetIntId))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[482]"></a>UART_GetLineStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_GetLineStatus))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[48c]"></a>UART_Init</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, lpc177x_8x_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>

<P><STRONG><a name="[488]"></a>UART_IntConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, lpc177x_8x_uart.o(i.UART_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uart_rcv_timeout
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetFromBuffer
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>

<P><STRONG><a name="[486]"></a>UART_Receive</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lpc177x_8x_uart.o(i.UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetValue
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetCharInNonBlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetChar
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntReceive
</UL>

<P><STRONG><a name="[492]"></a>UART_ReceiveByte</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_ReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[489]"></a>UART_Send</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, lpc177x_8x_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPutChar
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntTransmit
</UL>

<P><STRONG><a name="[493]"></a>UART_SendByte</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[494]"></a>UART_TxCmd</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lpc177x_8x_uart.o(i.UART_TxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>

<P><STRONG><a name="[32]"></a>USB_IRQHandler</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.USB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[420]"></a>UartInt_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, uartint.o(i.UartInt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UartInt_init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortPin_Init
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommInit
</UL>

<P><STRONG><a name="[495]"></a>Uart_PortPin_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, debug_frmwrk.o(i.Uart_PortPin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart_PortPin_Init &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>

<P><STRONG><a name="[428]"></a>WAVE_DAC_DMA_Handler</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, dac.o(i.WAVE_DAC_DMA_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WAVE_DAC_DMA_Handler &rArr; DAC_DMA_Update_Freq &rArr; DAC_SetDMATimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Setup
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_IntGetStatus
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ClearIntPending
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Update_Amp
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Calc_Freq_Gauge
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Calc_Amplitude_Gauge
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[3ea]"></a>WAVE_Generator_init</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, dac.o(i.WAVE_Generator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TPs
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Setup
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ConfigDAConverterControl
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Init
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Update_Amp
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Tmr_Init
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Calc_Amplitude_Gauge
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_audio_playing
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_playing
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
</UL>

<P><STRONG><a name="[3eb]"></a>WAVE_Generator_start</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dac.o(i.WAVE_Generator_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WAVE_Generator_start &rArr; DAC_DMA_Update_Freq &rArr; DAC_SetDMATimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelCmd
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Update_Amp
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Start
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Calc_Freq_Gauge
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Calc_Amplitude_Gauge
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_playing
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
</UL>

<P><STRONG><a name="[3f1]"></a>WAVE_Generator_stop</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dac.o(i.WAVE_Generator_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WAVE_Generator_stop &rArr; DAC_DMA_Update_Freq &rArr; DAC_SetDMATimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelCmd
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Update_Amp
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Stop
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Calc_Freq_Gauge
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Calc_Amplitude_Gauge
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[4a2]"></a>WAVE_Modulator_Update_Freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dac.o(i.WAVE_Modulator_Update_Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WAVE_Modulator_Update_Freq &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Tmr_Init
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Start
</UL>

<P><STRONG><a name="[3e2]"></a>WAVE_SetFreq_FTID</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dac.o(i.WAVE_SetFreq_FTID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WAVE_SetFreq_FTID &rArr; DAC_DMA_Update_Freq &rArr; DAC_SetDMATimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
</UL>

<P><STRONG><a name="[403]"></a>WAVE_SetFreq_RTID</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dac.o(i.WAVE_SetFreq_RTID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WAVE_SetFreq_RTID &rArr; DAC_DMA_Update_Freq &rArr; DAC_SetDMATimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
</UL>

<P><STRONG><a name="[3e1]"></a>WAVE_Update_FreqAmp_Gauge</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, dac.o(i.WAVE_Update_FreqAmp_Gauge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WAVE_Update_FreqAmp_Gauge
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
</UL>

<P><STRONG><a name="[4a5]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[738]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[4b7]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbDraw_MidWin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[739]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[73a]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[4a7]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[73b]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3ed]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
</UL>

<P><STRONG><a name="[73c]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[73d]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[39d]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pngtrans.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_shift
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sBIT
</UL>

<P><STRONG><a name="[4ae]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[49b]"></a>__WAVE_Update_Amp</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, dac.o(i.__WAVE_Update_Amp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __WAVE_Update_Amp
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
</UL>

<P><STRONG><a name="[4aa]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[4ab]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[4ac]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[4ad]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[45]"></a>__low_level_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __low_level_init &rArr; BSP_Init &rArr; __BSP_PWMInit &rArr; PWM_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_32M_16BIT_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init_IRQ_Priorities
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[4b0]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4b1]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[4b2]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4b3]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4b4]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4af]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[73e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[73f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[740]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4f8]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3c3]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4c6]"></a>audio_play_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aplay.o(i.audio_play_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = audio_play_init &rArr; __LPCDAC_Aplay_Init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
</UL>

<P><STRONG><a name="[4cf]"></a>debug_frmwrk_init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, debug_frmwrk.o(i.debug_frmwrk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = debug_frmwrk_init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortPin_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_init
</UL>

<P><STRONG><a name="[4c9]"></a>disk_initialize</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fs_mci.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = disk_initialize &rArr; mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Init
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[4d9]"></a>disk_ioctl</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, fs_mci.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disk_ioctl &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[4ca]"></a>disk_read</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fs_mci.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = disk_read &rArr; MCI_ReadBlock &rArr; MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetXferErrState
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetDataXferEndState
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4c8]"></a>disk_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_mci.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4e8]"></a>disk_timerproc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_mci.o(i.disk_timerproc))
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatFS_SysTick_Handler_1ms
</UL>

<P><STRONG><a name="[4dc]"></a>disk_write</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fs_mci.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetXferErrState
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetDataXferEndState
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4df]"></a>f_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_LoadRes
</UL>

<P><STRONG><a name="[50b]"></a>f_mount</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_ResloadInit
</UL>

<P><STRONG><a name="[4e1]"></a>f_open</STRONG> (Thumb, 314 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_LoadRes
</UL>

<P><STRONG><a name="[4e5]"></a>f_read</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_LoadRes
</UL>

<P><STRONG><a name="[4e0]"></a>f_sync</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[4e7]"></a>fatFS_SysTick_Handler_1ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fatfs_main.o(i.fatFS_SysTick_Handler_1ms))
<BR><BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_timerproc
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[4eb]"></a>ff_convert</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[4d3]"></a>ff_wtoupper</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[37c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_struct_2
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_struct
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_free_default
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zcfree
</UL>

<P><STRONG><a name="[4b9]"></a>get_DAC_DMA_Update_Freq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dac.o(i.get_DAC_DMA_Update_Freq))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[407]"></a>get_block_crc16</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, appcommon.o(i.get_block_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_block_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
</UL>

<P><STRONG><a name="[4cd]"></a>get_fat</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4e3]"></a>get_fattime</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, fatfs_main.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fattime
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFullTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4ed]"></a>handle_uart_rcv_timeout</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uartint.o(i.handle_uart_rcv_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[418]"></a>init_TPs</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, appcommon.o(i.init_TPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_TPs &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
</UL>

<P><STRONG><a name="[409]"></a>init_clock_generation</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, analog.o(i.init_clock_generation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = init_clock_generation &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
</UL>

<P><STRONG><a name="[49e]"></a>is_audio_playing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aplay.o(i.is_audio_playing))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
</UL>

<P><STRONG><a name="[3e0]"></a>is_dac_playing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dac.o(i.is_dac_playing))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, guidemo_start.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_init
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCreateFlags
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInit
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResLoadInit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommInit
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_Sleep
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_expo_gauges
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[37b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_warn
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct_2
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_struct
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_malloc_default
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zcalloc
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[4d8]"></a>mci_read_configuration</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, fs_mci.o(i.mci_read_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBusWidth
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardType
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardAddress
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCID
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unstuff_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[4ee]"></a>monitor_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, monitor.o(i.monitor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = monitor_init &rArr; debug_frmwrk_init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_frmwrk_init
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46f]"></a>on_clock_cmd</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, analog.o(i.on_clock_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = on_clock_cmd &rArr; UARTSend &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mat_value
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Clk_gen_Msg
</UL>

<P><STRONG><a name="[349]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_init_read_transformations
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_build_gamma_table
</UL>

<P><STRONG><a name="[48f]"></a>push_err</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, errorlog.o(i.push_err))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntErr
</UL>

<P><STRONG><a name="[4ce]"></a>put_fat</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[508]"></a>pvPortMalloc</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[518]"></a>pvTimerGetTimerID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(i.pvTimerGetTimerID))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback
</UL>

<P><STRONG><a name="[521]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[43f]"></a>sdmmc_LoadRes</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, fatfs_main.o(i.sdmmc_LoadRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = sdmmc_LoadRes &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRes
</UL>

<P><STRONG><a name="[472]"></a>sdmmc_ResloadInit</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, fatfs_main.o(i.sdmmc_ResloadInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdmmc_ResloadInit &rArr; RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFullTime
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResLoadInit
</UL>

<P><STRONG><a name="[3f7]"></a>set_lcd_bcklight_reduce_state</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp.o(i.set_lcd_bcklight_reduce_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = set_lcd_bcklight_reduce_state &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[4f7]"></a>set_mat_value</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, analog.o(i.set_mat_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_mat_value &rArr; start_clock_generation &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_clock_generation
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateMatchValue
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_clock_cmd
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Aclk
</UL>

<P><STRONG><a name="[4ea]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_expo_gauges
</UL>

<P><STRONG><a name="[4f9]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[40a]"></a>start_clock_generation</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, analog.o(i.start_clock_generation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_clock_generation &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mat_value
</UL>

<P><STRONG><a name="[4ba]"></a>start_dac_audio</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, aplay.o(i.start_dac_audio))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = start_dac_audio &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_waitMS
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Setup
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ClearIntPending
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[3de]"></a>start_dac_playing</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, appcommon.o(i.start_dac_playing))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = start_dac_playing &rArr; WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_comm_timeout
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_comm_timeout
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_comm_timeout
</UL>

<P><STRONG><a name="[40b]"></a>stop_clock_generation</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, analog.o(i.stop_clock_generation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stop_clock_generation &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ResetCounter
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
</UL>

<P><STRONG><a name="[395]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_handle_sCAL
</UL>

<P><STRONG><a name="[4f5]"></a>unstuff_bits</STRONG> (Thumb, 246 bytes, Stack size 28 bytes, fs_mci.o(i.unstuff_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = unstuff_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[4fc]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[3f8]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[51b]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[50e]"></a>vApplicationTickHook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guidemo_start.o(i.vApplicationTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_uart_rcv_timeout
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatFS_SysTick_Handler_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[519]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[520]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[4fd]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[512]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[504]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[507]"></a>vPortExitCritical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[502]"></a>vPortFree</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[4fa]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[501]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3f9]"></a>vTaskDelay</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_waitMS
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_BSP_processKS
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_clock_cmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_Communication
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_Serial_DbgFRMWRK
</UL>

<P><STRONG><a name="[506]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[511]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskPlaceOnEventList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[510]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[513]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[514]"></a>vTaskPriorityDisinherit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasks.o(i.vTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[515]"></a>vTaskPriorityInherit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[51e]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[4f1]"></a>vTaskStartScheduler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ff]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[121]"></a>vTaskSwitchContext</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4f0]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b5]"></a>xEventGroupSync</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, event_groups.o(i.xEventGroupSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xEventGroupSync &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromUnorderedEventList
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_BSP_processKS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_Communication
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__task_Serial_DbgFRMWRK
</UL>

<P><STRONG><a name="[517]"></a>xPortStartScheduler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4f6]"></a>xQueueCreateMutex</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_init
</UL>

<P><STRONG><a name="[50f]"></a>xQueueGenericCreate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGUITask
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3e4]"></a>xQueueGenericReceive</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandShake_on_msg_ready
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPFast_on_msg_ready
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPDisc_on_msg_ready
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllMetal_on_msg_ready
</UL>

<P><STRONG><a name="[4fe]"></a>xQueueGenericSend</STRONG> (Thumb, 600 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[490]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntReceive
</UL>

<P><STRONG><a name="[51f]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[421]"></a>xTaskGenericCreate</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialInit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[51d]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[40c]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_waitMS
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[48b]"></a>xTaskGetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCount &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[478]"></a>xTaskIncrementTick</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = xTaskIncrementTick &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[505]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[51a]"></a>xTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>

<P><STRONG><a name="[500]"></a>xTaskResumeAll</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[499]"></a>xTimerCreate</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = xTimerCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInt_init
</UL>

<P><STRONG><a name="[516]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[476]"></a>xTimerGenericCommand</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCommTimeout
</UL>

<P><STRONG><a name="[48a]"></a>xTimerIsTimerActive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTimerIsTimerActive &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4e9]"></a>fill_expo_gauges</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, guidemo_start.o(i.fill_expo_gauges))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fill_expo_gauges &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>vGUITask</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, guidemo_start.o(i.vGUITask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1548<LI>Call Chain = vGUITask &rArr; AZP_Menu &rArr; SB_init &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_EnableBIDI
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidemo_start.o(i.main)
</UL>
<P><STRONG><a name="[42a]"></a>DrawHB</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, statusbar.o(i.DrawHB))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DrawHB &rArr; GUI_MEMDEV_WriteAt &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbStatus
</UL>

<P><STRONG><a name="[93]"></a>_cbStatus</STRONG> (Thumb, 1814 bytes, Stack size 128 bytes, statusbar.o(i._cbStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _cbStatus &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutputValue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetTimerId
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_get_percentage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GET_RAW_ADC
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADCStart
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawHB
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statusbar.o(i.SB_init)
</UL>
<P><STRONG><a name="[41a]"></a>NVIC_EncodePriority</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, bsp.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init_IRQ_Priorities
</UL>

<P><STRONG><a name="[41b]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init_IRQ_Priorities
</UL>

<P><STRONG><a name="[417]"></a>__BSP_PWMInit</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, bsp.o(i.__BSP_PWMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __BSP_PWMInit &rArr; PWM_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ResetCounter
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CounterCmd
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigMatch
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Cmd
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ChannelConfig
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ChannelCmd
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_set_pwm_freq_hz
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[91]"></a>__task_BSP_processKS</STRONG> (Thumb, 476 bytes, Stack size 8 bytes, bsp.o(i.__task_BSP_processKS))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = __task_BSP_processKS &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKeyMsg
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.KS_init)
</UL>
<P><STRONG><a name="[43d]"></a>_InitController</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lcdconf_multiplebuffer.o(i._InitController))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _InitController &rArr; GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[92]"></a>_LCD_CopyBuffer</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lcdconf_multiplebuffer.o(i._LCD_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _LCD_CopyBuffer &rArr; GUI__memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf_multiplebuffer.o(i.LCD_X_Config)
</UL>
<P><STRONG><a name="[43e]"></a>_SetDisplayOrigin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcdconf_multiplebuffer.o(i._SetDisplayOrigin))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[430]"></a>GPIO_GetPointer</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(i.GPIO_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[45b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
</UL>

<P><STRONG><a name="[467]"></a>PWM_GetPointer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc177x_8x_pwm.o(i.PWM_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ResetCounter
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_MatchUpdate
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CounterCmd
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigMatch
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Cmd
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ChannelConfig
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ChannelCmd
</UL>

<P><STRONG><a name="[47f]"></a>converPtrToTimeNum</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(i.converPtrToTimeNum))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[480]"></a>converUSecToVal</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lpc177x_8x_timer.o(i.converUSecToVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPClock
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[4cb]"></a>getPClock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lpc177x_8x_timer.o(i.getPClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getPClock
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converUSecToVal
</UL>

<P><STRONG><a name="[48d]"></a>uart_get_pointer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.uart_get_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[48e]"></a>uart_set_divisors</STRONG> (Thumb, 478 bytes, Stack size 88 bytes, lpc177x_8x_uart.o(i.uart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[423]"></a>DAC_GetPointer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_dac.o(i.DAC_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetDMATimeOut
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetBias
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ConfigDAConverterControl
</UL>

<P><STRONG><a name="[42b]"></a>GLCD_Config</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, glcd.o(i.GLCD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClockDivide
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[42e]"></a>GLCD_Ctrl</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, glcd.o(i.GLCD_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GLCD_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Init
</UL>

<P><STRONG><a name="[42c]"></a>LCD_ClockDivide</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, glcd.o(i.LCD_ClockDivide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_ClockDivide
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Config
</UL>

<P><STRONG><a name="[94]"></a>__task_Serial_DbgFRMWRK</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, serial.o(i.__task_Serial_DbgFRMWRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __task_Serial_DbgFRMWRK &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetCharInNonBlock
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFocussedWindow
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.SerialInit)
</UL>
<P><STRONG><a name="[90]"></a>__task_Communication</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, communication.o(i.__task_Communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __task_Communication &rArr; xEventGroupSync &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> communication.o(i.CommInit)
</UL>
<P><STRONG><a name="[487]"></a>UARTGetFromBuffer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uartint.o(i.UARTGetFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UARTGetFromBuffer &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntReceive
</UL>

<P><STRONG><a name="[483]"></a>UART_IntErr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uartint.o(i.UART_IntErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_IntErr
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_err
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[484]"></a>UART_IntReceive</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, uartint.o(i.UART_IntReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_IntReceive &rArr; UARTGetFromBuffer &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetFromBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[485]"></a>UART_IntTransmit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, uartint.o(i.UART_IntTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_IntTransmit &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>vTimerCallback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uartint.o(i.vTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = vTimerCallback &rArr; UARTSend &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCommTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uartint.o(i.UartInt_init)
</UL>
<P><STRONG><a name="[503]"></a>prvUnlockQueue</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[ae]"></a>prvIdleTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[ad]"></a>prvTaskExitError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[4fb]"></a>prvSampleTimeNow</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[af]"></a>prvTimerTask</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vApplicationTickHook &rArr; handle_uart_rcv_timeout &rArr; UART_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[ac]"></a>__get_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, monitor.o(i.__get_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __get_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(i.monitor_init)
</UL>
<P><STRONG><a name="[ab]"></a>__put_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, monitor.o(i.__put_char))
<BR>[Address Reference Count : 1]<UL><LI> monitor.o(i.monitor_init)
</UL>
<P><STRONG><a name="[4c7]"></a>chk_mounted</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = chk_mounted &rArr; disk_initialize &rArr; mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4cc]"></a>create_chain</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[4d0]"></a>dir_find</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4d4]"></a>dir_next</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4d6]"></a>dir_register</STRONG> (Thumb, 714 bytes, Stack size 64 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4d1]"></a>dir_sdi</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4e2]"></a>follow_path</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4d7]"></a>mem_cpy</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4d5]"></a>mem_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[4d2]"></a>move_window</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4e4]"></a>remove_chain</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4e6]"></a>sync</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ff.o(i.sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[3cf]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aplay.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APLAY_DAC_DMA_Handler
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LPCDAC_Aplay_Init
</UL>

<P><STRONG><a name="[4a8]"></a>__LPCDAC_Aplay_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, aplay.o(i.__LPCDAC_Aplay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = __LPCDAC_Aplay_Init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TPs
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Setup
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ConfigDAConverterControl
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play_init
</UL>

<P><STRONG><a name="[49d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dac.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Stop
</UL>

<P><STRONG><a name="[47d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dac.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WAVE_Modulator_Start
</UL>

<P><STRONG><a name="[49a]"></a>__WAVE_Calc_Amplitude_Gauge</STRONG> (Thumb, 348 bytes, Stack size 0 bytes, dac.o(i.__WAVE_Calc_Amplitude_Gauge))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
</UL>

<P><STRONG><a name="[49c]"></a>__WAVE_Calc_Freq_Gauge</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, dac.o(i.__WAVE_Calc_Freq_Gauge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __WAVE_Calc_Freq_Gauge
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_start
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_DAC_DMA_Handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
</UL>

<P><STRONG><a name="[4a0]"></a>__WAVE_Modulator_Start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dac.o(i.__WAVE_Modulator_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __WAVE_Modulator_Start &rArr; WAVE_Modulator_Update_Freq &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Modulator_Update_Freq
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_start
</UL>

<P><STRONG><a name="[4a1]"></a>__WAVE_Modulator_Stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dac.o(i.__WAVE_Modulator_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __WAVE_Modulator_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
</UL>

<P><STRONG><a name="[49f]"></a>__WAVE_Modulator_Tmr_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dac.o(i.__WAVE_Modulator_Tmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __WAVE_Modulator_Tmr_Init &rArr; TIM_Init &rArr; converUSecToVal &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Modulator_Update_Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
</UL>

<P><STRONG><a name="[98]"></a>AllMetal_on_comm_timeout</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, azpallmetal.o(i.AllMetal_on_comm_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AllMetal_on_comm_timeout &rArr; start_dac_playing &rArr; WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_playing
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpallmetal.o(i._cbMidDraw)
</UL>
<P><STRONG><a name="[3fa]"></a>AllMetal_on_msg_ready</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, azpallmetal.o(i.AllMetal_on_msg_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = AllMetal_on_msg_ready &rArr; start_dac_playing &rArr; WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_playing
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCommTimeout
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_SetFreq_RTID
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_AllMetal
</UL>

<P><STRONG><a name="[83]"></a>_cbBk_Desktop</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, azpallmetal.o(i._cbBk_Desktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _cbBk_Desktop &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpallmetal.o(i.AZP_AllMetal)
</UL>
<P><STRONG><a name="[85]"></a>_cbLDraw</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, azpallmetal.o(i._cbLDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _cbLDraw &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpallmetal.o(i.AZP_AllMetal)
</UL>
<P><STRONG><a name="[84]"></a>_cbMidDraw</STRONG> (Thumb, 876 bytes, Stack size 40 bytes, azpallmetal.o(i._cbMidDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _cbMidDraw &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DAC_DMA_Update_Freq
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_scope
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpallmetal.o(i.AZP_AllMetal)
</UL>
<P><STRONG><a name="[86]"></a>_cbRDraw</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, azpallmetal.o(i._cbRDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _cbRDraw &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpallmetal.o(i.AZP_AllMetal)
</UL>
<P><STRONG><a name="[4b8]"></a>clear_scope</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, azpallmetal.o(i.clear_scope))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_scope
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[99]"></a>AZPDisc_on_comm_timeout</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, azpdisc.o(i.AZPDisc_on_comm_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AZPDisc_on_comm_timeout &rArr; start_dac_playing &rArr; WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_playing
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpdisc.o(i._cbMidDraw)
</UL>
<P><STRONG><a name="[3df]"></a>AZPDisc_on_msg_ready</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, azpdisc.o(i.AZPDisc_on_msg_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = AZPDisc_on_msg_ready &rArr; start_dac_playing &rArr; WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_playing
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCommTimeout
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_SetFreq_FTID
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Disc
</UL>

<P><STRONG><a name="[87]"></a>_cbBk_Desktop</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, azpdisc.o(i._cbBk_Desktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _cbBk_Desktop &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpdisc.o(i.AZP_Disc)
</UL>
<P><STRONG><a name="[88]"></a>_cbMidDraw</STRONG> (Thumb, 1134 bytes, Stack size 80 bytes, azpdisc.o(i._cbMidDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _cbMidDraw &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DAC_DMA_Update_Freq
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_scope
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpdisc.o(i.AZP_Disc)
</UL>
<P><STRONG><a name="[4bb]"></a>clear_scope</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, azpdisc.o(i.clear_scope))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_scope
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[9a]"></a>AZPFast_on_comm_timeout</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, azpfast.o(i.AZPFast_on_comm_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AZPFast_on_comm_timeout &rArr; start_dac_playing &rArr; WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_playing
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpfast.o(i._cbMidDraw)
</UL>
<P><STRONG><a name="[3e5]"></a>AZPFast_on_msg_ready</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, azpfast.o(i.AZPFast_on_msg_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = AZPFast_on_msg_ready &rArr; start_dac_playing &rArr; WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_playing
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetVal
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCommTimeout
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_SetFreq_FTID
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Fast
</UL>

<P><STRONG><a name="[89]"></a>_cbBk_Desktop</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, azpfast.o(i._cbBk_Desktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _cbBk_Desktop &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpfast.o(i.AZP_Fast)
</UL>
<P><STRONG><a name="[8a]"></a>_cbMidDraw</STRONG> (Thumb, 926 bytes, Stack size 40 bytes, azpfast.o(i._cbMidDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _cbMidDraw &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DAC_DMA_Update_Freq
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpfast.o(i.AZP_Fast)
</UL>
<P><STRONG><a name="[401]"></a>HandShake_on_msg_ready</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, azploading.o(i.HandShake_on_msg_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HandShake_on_msg_ready &rArr; APP_SetVal &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetVal
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Clk_gen_Msg
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCommTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Loading
</UL>

<P><STRONG><a name="[8d]"></a>Handshake_comm_fail</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, azploading.o(i.Handshake_comm_fail))
<BR>[Address Reference Count : 2]<UL><LI> azploading.o(i.AZP_Loading)
<LI> azploading.o(i.HandShake_on_msg_ready)
</UL>
<P><STRONG><a name="[8b]"></a>_cbBk_Desktop</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, azploading.o(i._cbBk_Desktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _cbBk_Desktop &rArr; GetString &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azploading.o(i.AZP_Loading)
</UL>
<P><STRONG><a name="[8c]"></a>_cbDraw_MidWin</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, azploading.o(i._cbDraw_MidWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _cbDraw_MidWin &rArr; GUI_DrawGradientRoundedH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetTimerId
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azploading.o(i.AZP_Loading)
</UL>
<P><STRONG><a name="[82]"></a>AZPMenu_on_comm_timeout</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, azpmenu.o(i.AZPMenu_on_comm_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AZPMenu_on_comm_timeout &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Address Reference Count : 2]<UL><LI> azpmenu.o(i._cbMidDraw)
<LI> azpmenu.o(i.AZPMenu_on_msg_ready)
</UL>
<P><STRONG><a name="[3e6]"></a>AZPMenu_on_msg_ready</STRONG> (Thumb, 1262 bytes, Stack size 40 bytes, azpmenu.o(i.AZPMenu_on_msg_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = AZPMenu_on_msg_ready &rArr; WAVE_Generator_init &rArr; APP_GetValue &rArr; App_ReloadSettings &rArr;  App_ReloadSettings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetVal
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Clk_gen_Msg
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopCommTimeout
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Aclk
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_2_mangbstep
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mangbstep_2_phase
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
</UL>

<P><STRONG><a name="[8e]"></a>_cbBk_Desktop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, azpmenu.o(i._cbBk_Desktop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _cbBk_Desktop &rArr; GUI_Clear &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpmenu.o(i.AZP_Menu)
</UL>
<P><STRONG><a name="[8f]"></a>_cbMidDraw</STRONG> (Thumb, 4476 bytes, Stack size 80 bytes, azpmenu.o(i._cbMidDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1540<LI>Call Chain = _cbMidDraw &rArr; InitGroupRes &rArr; GUI_PNG_Draw &rArr; GUI_PNG_DrawEx &rArr; _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_waitMS
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGroupRes
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PWMSet
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SetHWTypeStates
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReloadSettings
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetValue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetTimerId
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_setget_component
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StoreSettings
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetVal
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_dac_audio
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetUserData
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_dac_playing
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DAC_DMA_Update_Freq
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Update_FreqAmp_Gauge
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAVE_Generator_stop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMA_Update_Freq
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Aclk
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mangbstep_2_phase
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_submenu
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_setting_val
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_lang
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_depth
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> azpmenu.o(i.AZP_Menu)
</UL>
<P><STRONG><a name="[4c0]"></a>draw_autogb</STRONG> (Thumb, 704 bytes, Stack size 56 bytes, azpmenu.o(i.draw_autogb))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = draw_autogb &rArr; draw_slider &rArr; GUI_DrawGradientRoundedH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[4be]"></a>draw_depth</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, azpmenu.o(i.draw_depth))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = draw_depth &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[4bf]"></a>draw_lang</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, azpmenu.o(i.draw_lang))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = draw_lang &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString2Lang
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[4c1]"></a>draw_mangb</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, azpmenu.o(i.draw_mangb))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = draw_mangb &rArr; draw_slider &rArr; GUI_DrawGradientRoundedH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetString
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_slider
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[4bd]"></a>draw_setting_val</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, azpmenu.o(i.draw_setting_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = draw_setting_val &rArr; GUI_DrawGradientRoundedH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[4dd]"></a>draw_slider</STRONG> (Thumb, 542 bytes, Stack size 64 bytes, azpmenu.o(i.draw_slider))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = draw_slider &rArr; GUI_DrawGradientRoundedH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_mangb
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_autogb
</UL>

<P><STRONG><a name="[4bc]"></a>draw_submenu</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, azpmenu.o(i.draw_submenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = draw_submenu &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
</UL>

<P><STRONG><a name="[3e8]"></a>mangbstep_2_phase</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, azpmenu.o(i.mangbstep_2_phase))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_Aclk
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
</UL>

<P><STRONG><a name="[3f0]"></a>phase_2_mangbstep</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, azpmenu.o(i.phase_2_mangbstep))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZP_Menu
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
</UL>

<P><STRONG><a name="[3ef]"></a>set_Aclk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, azpmenu.o(i.set_Aclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_Aclk &rArr; set_mat_value &rArr; start_clock_generation &rArr; TIM_ConfigMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mat_value
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mangbstep_2_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMidDraw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AZPMenu_on_msg_ready
</UL>

<P><STRONG><a name="[b0]"></a>_Color2Index_M565</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, GUICC_M565.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUICC_M565.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>_Color2IndexBulk</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, GUICC_M565.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>_Index2ColorBulk</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, GUICC_M565.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_M565.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>_Color2Index_8</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, GUICC_8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>_Index2Color_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUICC_8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>_GetIndexMask_8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, GUICC_8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>_Color2Index_8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, GUICC_8888.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>_GetIndexMask_8888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUICC_8888.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>_Color2IndexBulk</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, GUICC_8888.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>_Index2ColorBulk</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, GUICC_8888.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_8888.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>_AddFreeMemory</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _AddFreeMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[47]"></a>_OnExit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit &rArr; GUI__memset
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Alloc.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>_InitOnce</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[131]"></a>_Alloc</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[130]"></a>_EnlargeBlocks</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[12b]"></a>_GetMinIndex</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, GUI_Alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[135]"></a>_RemoveHoles</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, GUI_Alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _RemoveHoles &rArr; _AddFreeMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>

<P><STRONG><a name="[2]"></a>_NextPixel_Start</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _NextPixel_Start &rArr; GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_BMP.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>_NextPixel_SetPixel</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _NextPixel_SetPixel &rArr; _NextPixel_FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_BMP.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>_NextPixel_NextLine</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _NextPixel_NextLine &rArr; _NextPixel_FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_BMP.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>_NextPixel_End</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _NextPixel_End &rArr; _NextPixel_FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_BMP.o(.data)
</UL>
<P><STRONG><a name="[143]"></a>_GetClipParam</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetClipParam
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
</UL>

<P><STRONG><a name="[1]"></a>_DrawLine_RGB</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DrawLine_RGB
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> GUI_BMP.o(.text)
<LI> GUI_BMP.o(.data)
</UL>
<P><STRONG><a name="[142]"></a>_DrawBitmap_RGB</STRONG> (Thumb, 300 bytes, Stack size 144 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmap_RGB &rArr; _GetEarlyOut
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEarlyOut
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetClipParam
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>

<P><STRONG><a name="[146]"></a>_ManageBitfields</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ManageBitfields
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBitfields
</UL>

<P><STRONG><a name="[49]"></a>_Index2ColorBitfields</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Index2ColorBitfields &rArr; _ManageBitfields
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageBitfields
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_BMP.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>_NextPixel_FlushBuffer</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _NextPixel_FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_NextLine
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_SetPixel
</UL>

<P><STRONG><a name="[144]"></a>_GetEarlyOut</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetEarlyOut
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
</UL>

<P><STRONG><a name="[14f]"></a>_Draw</STRONG> (Thumb, 1794 bytes, Stack size 192 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _Draw &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpfColor2IndexEx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEarlyOut
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageBitfields
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetClipParam
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_Draw
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>

<P><STRONG><a name="[156]"></a>_DrawBitmap_16bpp</STRONG> (Thumb, 252 bytes, Stack size 104 bytes, GUI_BMP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _DrawBitmap_16bpp &rArr; _GetEarlyOut
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpfColor2IndexEx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEarlyOut
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetClipParam
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>

<P><STRONG><a name="[15b]"></a>Draw8Point</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, GUI_Circ.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircle
</UL>

<P><STRONG><a name="[4a]"></a>_OnExit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, GUI_Core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit &rArr; GUI__memset
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Core.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>_DispChar</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, GUI_SIF_Prop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SIF__GetpCharInfo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SIF_Prop.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>_GetCharCode</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, GUI_UC_EncodeUTF8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeUTF8.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>_GetCharSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, GUI_UC_EncodeUTF8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeUTF8.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>_CalcSizeOfChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, GUI_UC_EncodeUTF8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeUTF8.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>_Encode</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, GUI_UC_EncodeUTF8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeUTF8.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>_GetRect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, GUIDRV_Lin_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>_SetPos</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _SetPos &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>_GetPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _GetPos &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>_SetAlpha</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _SetAlpha &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>_SetVis</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _SetVis &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>_On</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _On &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>_Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _Off &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>_SetAlphaMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _SetAlphaMode &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>_SetChromaMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _SetChromaMode &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>_SetChroma</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _SetChroma &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_CopyBuffer</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _CopyBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>_ShowBuffer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _ShowBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>_SetOrg</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver &rArr; _InitController &rArr; GLCD_Init &rArr; GLCD_Config &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>_SetVRAMAddr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _SetVRAMAddr &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>_SetVSize</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _SetVSize &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>_SetSize</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _SetSize &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>_SetPixelIndex</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, GUIDRV_Lin_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>_GetPixelIndex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, GUIDRV_Lin_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>_XorPixel</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _XorPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>_FillRect</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawHLine &rArr; _FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>_DrawVLine</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawVLine &rArr; _FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>_DrawBitmap</STRONG> (Thumb, 1790 bytes, Stack size 72 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawBitmap &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>_GetDevProp</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, GUIDRV_Lin_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDRV_Lin_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>_ReadRect</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ReadRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>_SetDevFunc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, GUIDRV_Lin_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _SetDevFunc &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>_GetDevFunc</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, GUIDRV_Lin_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDRV_Lin_16.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>_DrawBitmap</STRONG> (Thumb, 2204 bytes, Stack size 136 bytes, GUIDEV_32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DrawBitmap &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>_FillRect</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, GUIDEV_32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, GUIDEV_32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>_DrawVLine</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, GUIDEV_32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>_SetPixelIndex</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, GUIDEV_32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>_XorPixel</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, GUIDEV_32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>_GetPixelIndex</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, GUIDEV_32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>_GetRect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUIDEV_32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDEV_32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>_GetDevFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDEV_32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>_GetDevProp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDEV_32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUIDEV_32.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_32.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>_DrawBitmap</STRONG> (Thumb, 1862 bytes, Stack size 136 bytes, GUIDEV_8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DrawBitmap &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>_FillRect</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, GUIDEV_8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, GUIDEV_8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>_DrawVLine</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, GUIDEV_8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>_SetPixelIndex</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, GUIDEV_8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>_XorPixel</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, GUIDEV_8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>_GetPixelIndex</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, GUIDEV_8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>_GetRect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUIDEV_8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDEV_8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>_GetDevFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDEV_8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUIDEV_8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>_GetDevProp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUIDEV_8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_8.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>GUI_PNG__GetData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, GUI_PNG.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_PNG__GetData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_PNG.o(.text)
</UL>
<P><STRONG><a name="[20f]"></a>_GetImageHeader</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, GUI_PNG.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = _GetImageHeader &rArr; png_create_read_struct_2 &rArr; png_create_struct_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_sig_cmp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_sig_bytes
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_set_read_fn
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_read_info
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_get_IHDR
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_destroy_read_struct
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_read_struct_2
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;png_create_info_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_DrawEx
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSize
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetYSizeEx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PNG_GetXSizeEx
</UL>

<P><STRONG><a name="[6c]"></a>_png_cexcept_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, GUI_PNG.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_png_cexcept_error
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_png_cexcept_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_PNG.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>_png_read_data</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, GUI_PNG.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _png_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_PNG.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>_malloc_fn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GUI_PNG.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _malloc_fn &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr;  _EnlargeBlocks (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_PNG.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>_free_fn</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, GUI_PNG.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _free_fn &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_p2h
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_PNG.o(.text)
</UL>
<P><STRONG><a name="[23c]"></a>_DesktopHandle2Index</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, WM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>

<P><STRONG><a name="[24d]"></a>_DeleteAllChildren</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _DeleteAllChildren &rArr;  WM_DeleteWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[25d]"></a>_PaintTransChildren</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>

<P><STRONG><a name="[6f]"></a>_cbPaintMemDev</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _cbPaintMemDev &rArr; WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>cbBackWin</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cbBackWin &rArr; GUI_Clear &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>_OnExit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, WM.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> WM.o(.text)
</UL>
<P><STRONG><a name="[234]"></a>_Invalidate1Abs</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[256]"></a>_Findy1</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[257]"></a>_Findx0</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[258]"></a>_Findx1</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _Findx1 &rArr;  _Findx1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>

<P><STRONG><a name="[25e]"></a>WM__PaintWinAndOverlays</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, WM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
</UL>

<P><STRONG><a name="[72]"></a>_cbTimer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, WM_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _cbTimer &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_InvalidateRect &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> WM_Timer.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, GUI_CharLine.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_CharLine.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, GUI_Task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_Task.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>_OnExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, GUI_Timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_Timer.o(.text)
</UL>
<P><STRONG><a name="[2aa]"></a>_Link</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, GUI_Timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Link
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetDelay
</UL>

<P><STRONG><a name="[ef]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, GUI_UC_EncodeNone.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, GUI_UC_EncodeNone.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, GUI_UC_EncodeNone.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, GUI_UC_EncodeNone.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_UC_EncodeNone.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>_OnExit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, GUI__Alpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Alpha.o(.text)
</UL>
<P><STRONG><a name="[2b4]"></a>_DoJoiningAndDecoding</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _DoJoiningAndDecoding &rArr; GUI__GetPresentationForm &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IsArabicCharacter
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetPresentationForm
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_Log2Vis
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetLogChar
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosChar
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorCharacter
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCharDir
</UL>

<P><STRONG><a name="[2b7]"></a>_BiDiResolveExplicit</STRONG> (Thumb, 246 bytes, Stack size 44 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = _BiDiResolveExplicit &rArr;  _BiDiResolveExplicit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiResolveExplicit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiDoTransformations
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiResolveExplicit
</UL>

<P><STRONG><a name="[2b8]"></a>_BiDiDoTransformations</STRONG> (Thumb, 676 bytes, Stack size 64 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _BiDiDoTransformations &rArr; _BiDiResolveExplicit &rArr;  _BiDiResolveExplicit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiResolveExplicit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_Log2Vis
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosChar
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCharDir
</UL>

<P><STRONG><a name="[2bb]"></a>_BiDiReorder</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _BiDiReorder &rArr; _ReorderLevel &rArr;  _ReorderLevel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReorderLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_Log2Vis
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosX
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__BIDI_GetCursorPosChar
</UL>

<P><STRONG><a name="[2bf]"></a>_ReorderLevel</STRONG> (Thumb, 126 bytes, Stack size 36 bytes, GUI__BiDi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = _ReorderLevel &rArr;  _ReorderLevel (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReorderLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReorderLevel
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BiDiReorder
</UL>

<P><STRONG><a name="[7]"></a>_GetCursorPosX</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, GUI__GetCursorPos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _GetCursorPosX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__GetCursorPos.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_GetCursorPosChar</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, GUI__GetCursorPos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _GetCursorPosChar &rArr; GUI_UC_GetCharSize &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumBytes2NumChars
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__GetCursorPos.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_GetCursorCharacter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, GUI__GetCursorPos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _GetCursorCharacter &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__GetCursorPos.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_GetWordWrap</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, GUI__Wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _GetWordWrap &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Wrap.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>_GetCharWrap</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, GUI__Wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _GetCharWrap &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI__Wrap.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>_SetBkColor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetBkColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>_SetColor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>_SetDrawMode</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, LCD.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> LCD.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, LCD_Color.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> LCD_Color.o(.text)
</UL>
<P><STRONG><a name="[2c8]"></a>LCD_ReadRectEx</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, LCD_ReadRect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectNoClip
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRect
</UL>

<P><STRONG><a name="[fa]"></a>_DrawBitmap</STRONG> (Thumb, 2188 bytes, Stack size 144 bytes, GUIDEV_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmap &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>_FillRect</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, GUIDEV_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, GUIDEV_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>_DrawVLine</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, GUIDEV_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>_SetPixelIndex</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, GUIDEV_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>_XorPixel</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, GUIDEV_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>_GetPixelIndex</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, GUIDEV_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>_GetRect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUIDEV_16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>_GetDevData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDEV_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>_GetDevFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, GUIDEV_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUIDEV_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>_GetDevProp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUIDEV_16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_16.o(.constdata)
</UL>
<P><STRONG><a name="[2d7]"></a>_GetWindowDevice</STRONG> (Thumb, 770 bytes, Stack size 104 bytes, GUIDEV_StaticDevices.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetWindowDevice
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetWindowDevice
</UL>

<P><STRONG><a name="[2d9]"></a>_CreateStaticDevice</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, GUIDEV_StaticDevices.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _CreateStaticDevice &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaSuppressMixing
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateStatic
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
</UL>

<P><STRONG><a name="[2db]"></a>_CreateStatic</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, GUIDEV_StaticDevices.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateStatic
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStatic
</UL>

<P><STRONG><a name="[106]"></a>GUI_USAGE_BM_AddPixel</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, GUIDEV_UsageBM.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>GUI_USAGE_BM_AddHLine</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, GUIDEV_UsageBM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_USAGE_BM_AddHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>GUI_USAGE_BM_Clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, GUIDEV_UsageBM.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>GUI_USAGE_BM_GetNextDirty</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, GUIDEV_UsageBM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_USAGE_BM_GetNextDirty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>_GUI_USAGE_BM_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, GUIDEV_UsageBM.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _GUI_USAGE_BM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUIDEV_UsageBM.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>_Color2Index_0</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, GUICC_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2Index_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>_Index2Color_0</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, GUICC_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Index2Color_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>_GetIndexMask_0</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, GUICC_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetIndexMask_0 &rArr; LCD_GetNumColors
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUICC_0.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>_Color2Index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>_Index2Color</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>_GetIndexMask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>_Color2IndexBulk</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>_Index2ColorBulk</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>_ReadRectFromMemdev</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _ReadRectFromMemdev &rArr; GUI_MEMDEV_GetYPos &rArr; GUI_Lock &rArr; GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndices
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.text)
</UL>
<P><STRONG><a name="[36a]"></a>_GetLine</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _GetLine &rArr; LCD_GetBitsPerPixelEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[117]"></a>_GetPixelIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>_SetPixelIndex</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _SetPixelIndex &rArr; _MixColors &rArr; GUI__MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MixColors
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>_XorPixel</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _XorPixel &rArr; _SetPixelIndex &rArr; _MixColors &rArr; GUI__MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>_DrawBitmap</STRONG> (Thumb, 1704 bytes, Stack size 88 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmap &rArr; _GetLine &rArr; LCD_GetBitsPerPixelEx
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>_DrawHLine</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _DrawHLine &rArr; _GetLine &rArr; LCD_GetBitsPerPixelEx
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>_DrawVLine</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _DrawVLine &rArr; _SetPixelIndex &rArr; _MixColors &rArr; GUI__MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>_FillRect</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _FillRect &rArr; _GetLine &rArr; LCD_GetBitsPerPixelEx
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>_GetDevData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>_GetDevFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>_GetDevProp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>_GetRect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, GUI_SetAlpha.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>_OnExit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> GUI_SetAlpha.o(.text)
</UL>
<P><STRONG><a name="[36b]"></a>_MixColors</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _MixColors &rArr; GUI__MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>

<P><STRONG><a name="[36c]"></a>_DrawBitmapLine</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, GUI_SetAlpha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _DrawBitmapLine &rArr; LCD_GetBitsPerPixelEx
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[373]"></a>crc32_big</STRONG> (Thumb, 1034 bytes, Stack size 16 bytes, crc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc32_big
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>

<P><STRONG><a name="[378]"></a>updatewindow</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, inflate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = updatewindow &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateSetDictionary
</UL>

<P><STRONG><a name="[3aa]"></a>_MoveDescendents</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, WM_Move.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + In Cycle
<LI>Call Chain = _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[4c2]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a6]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[4c4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[97]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[3b9]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[3c0]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
